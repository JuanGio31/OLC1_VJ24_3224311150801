package org.example.backend.interprete.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import org.example.backend.interprete.abstracto.Instruccion;
import org.example.backend.interprete.expresion.*;
import org.example.backend.interprete.simbol.*;

import org.example.backend.interprete.instruccion.*;

class Parser;

parser code {:
    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }
:}


//** Simboloes terminal **//
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal LPAREN, RPAREN, TIMES, INT, DOUBLE, BOOL, CHAR, STRING, VAR, CONST, MAS, MENOS, DIVIDE, MOD, UMENOS;
terminal NE, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL, OR, AND, XOR, NOT, IF, ELSE, WHILE, DO, FOR, MATCH, DEFAULT, LBRACE;
terminal RBRACE, FIN_INSTRUCCION, IGUAL, PRINTLN, TRUE, FALSE, CARACTER, COMA, DOS_PUNTOS;

//** Simbolos no terminales **//
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion PRINT;
nonterminal Instruccion EXPRESION;
nonterminal Tipo TIPO;

//** Precedencia **//
precedence left IGUAL;
precedence left MAS, MENOS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMENOS;

//** Definir gramaticas **//
start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= PRINT: a      {:   RESULT = a;   :}
                | error FIN_INSTRUCCION
;

PRINT ::= PRINTLN LPAREN EXPRESION:a RPAREN FIN_INSTRUCCION      {:   RESULT = new Print(a, aleft, aright);   :};
//TIPOS ::= INT       {:   RESULT=new Tipo(tipoDato.ENTERO);   :}
//        | DOUBLE    {:   RESULT=new Tipo(tipoDato.DECIMAL);   :}
//        | STRING    {:   RESULT=new Tipo(tipoDato.CADENA);   :}
//;

EXPRESION ::= MENOS EXPRESION:a             {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | EXPRESION:a MENOS EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);  :}
            | EXPRESION:a TIMES EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);  :}
            | EXPRESION:a DIVIDE EXPRESION:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  :}
            | LPAREN EXPRESION:a RPAREN     {:   RESULT = a; :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );   :}
            | CARACTER:a     {:   RESULT = new Nativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );   :}
        //    | EXPRESION:a IGUAL IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);    :}%prec ASSIGN
           // | ID:a          {:   RESULT = new AccesoVar(a, aleft, aright);   :}
;