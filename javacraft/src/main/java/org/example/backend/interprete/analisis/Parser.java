
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.backend.interprete.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import org.example.backend.interprete.abstracto.Instruccion;
import org.example.backend.interprete.expresion.*;
import org.example.backend.interprete.error.*;
import org.example.backend.interprete.simbol.*;
import org.example.backend.interprete.instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\017\007\000" +
    "\002\023\011\000\002\023\011\000\002\023\007\000\002" +
    "\023\007\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\007\004\000\002\010\004\000\002\006\011" +
    "\000\002\006\013\000\002\006\015\000\002\004\004\000" +
    "\002\004\003\000\002\012\010\000\002\012\006\000\002" +
    "\011\011\000\002\015\011\000\002\016\013\000\002\013" +
    "\014\000\002\013\014\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\007\000\002\026\005\000\002\027\015\000\002" +
    "\027\015\000\002\027\017\000\002\027\017\000\002\030" +
    "\011\000\002\030\014\000\002\031\015\000\002\032\011" +
    "\000\002\033\004\000\002\020\006\000\002\021\006\000" +
    "\002\022\010\000\002\040\011\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\034\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\006\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\006\000\002\034\004\000\002\034\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\006\000\002" +
    "\036\010\000\002\037\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\050\003\032\007\031\013\015\014\012\015" +
    "\024\016\010\017\047\020\051\021\007\040\027\042\043" +
    "\043\053\044\020\045\022\051\017\055\033\056\014\070" +
    "\044\102\035\001\002\000\056\002\ufff3\003\ufff3\007\ufff3" +
    "\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\050\ufff3\051\ufff3\055\ufff3\056\ufff3\070\ufff3\102\ufff3\001" +
    "\002\000\056\002\uffef\003\uffef\007\uffef\011\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\040" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\050\uffef\051\uffef" +
    "\055\uffef\056\uffef\070\uffef\102\uffef\001\002\000\004\007" +
    "\u0128\001\002\000\004\007\u0117\001\002\000\016\007\uffbf" +
    "\011\uffbf\031\uffbf\061\uffbf\063\uffbf\064\uffbf\001\002\000" +
    "\056\002\ufff7\003\ufff7\007\ufff7\011\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\040\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\050\ufff7\051\ufff7\055\ufff7" +
    "\056\ufff7\070\ufff7\102\ufff7\001\002\000\016\007\uffc1\011" +
    "\uffc1\031\uffc1\061\uffc1\063\uffc1\064\uffc1\001\002\000\056" +
    "\002\uffee\003\uffee\007\uffee\011\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\040\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\050\uffee\051\uffee\055\uffee\056" +
    "\uffee\070\uffee\102\uffee\001\002\000\004\063\u0116\001\002" +
    "\000\016\007\uffc2\011\uffc2\031\uffc2\061\uffc2\063\uffc2\064" +
    "\uffc2\001\002\000\056\002\ufffe\003\ufffe\007\ufffe\011\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\040\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe" +
    "\051\ufffe\055\ufffe\056\ufffe\070\ufffe\102\ufffe\001\002\000" +
    "\004\010\u0112\001\002\000\004\010\355\001\002\000\052" +
    "\002\000\003\032\007\031\013\015\014\012\015\024\016" +
    "\010\017\047\020\051\021\007\040\027\042\043\043\053" +
    "\044\020\045\022\051\017\055\033\056\014\070\044\102" +
    "\035\001\002\000\004\010\333\001\002\000\056\002\ufff5" +
    "\003\ufff5\007\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\040\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\050\ufff5\051\ufff5\055\ufff5\056\ufff5\070" +
    "\ufff5\102\ufff5\001\002\000\016\007\uffc0\011\uffc0\031\uffc0" +
    "\061\uffc0\063\uffc0\064\uffc0\001\002\000\056\002\ufff4\003" +
    "\ufff4\007\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\040\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4\070\ufff4" +
    "\102\ufff4\001\002\000\056\002\ufff0\003\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\050" +
    "\ufff0\051\ufff0\055\ufff0\056\ufff0\070\ufff0\102\ufff0\001\002" +
    "\000\004\010\320\001\002\000\056\002\ufff9\003\ufff9\007" +
    "\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\040\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\050\ufff9\051\ufff9\055\ufff9\056\ufff9\070\ufff9\102\ufff9" +
    "\001\002\000\014\022\267\023\271\061\265\064\270\100" +
    "\266\001\002\000\004\063\264\001\002\000\004\063\263" +
    "\001\002\000\056\002\ufff6\003\ufff6\007\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\051" +
    "\ufff6\055\ufff6\056\ufff6\070\ufff6\102\ufff6\001\002\000\016" +
    "\007\uffbd\011\uffbd\031\uffbd\061\uffbd\063\uffbd\064\uffbd\001" +
    "\002\000\056\002\ufff8\003\ufff8\007\ufff8\011\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\070\ufff8\102\ufff8\001\002\000\056\002" +
    "\ufff2\003\ufff2\007\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\050\ufff2\051\ufff2\055\ufff2\056\ufff2" +
    "\070\ufff2\102\ufff2\001\002\000\056\002\ufffb\003\ufffb\007" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\050\ufffb\051\ufffb\055\ufffb\056\ufffb\070\ufffb\102\ufffb" +
    "\001\002\000\056\002\ufffc\003\ufffc\007\ufffc\011\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\050\ufffc\051" +
    "\ufffc\055\ufffc\056\ufffc\070\ufffc\102\ufffc\001\002\000\004" +
    "\063\262\001\002\000\004\010\254\001\002\000\004\030" +
    "\242\001\002\000\056\002\ufffa\003\ufffa\007\ufffa\011\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa" +
    "\051\ufffa\055\ufffa\056\ufffa\070\ufffa\102\ufffa\001\002\000" +
    "\056\002\ufff1\003\ufff1\007\ufff1\011\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\040\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1\055\ufff1" +
    "\056\ufff1\070\ufff1\102\ufff1\001\002\000\016\007\uffbe\011" +
    "\uffbe\031\uffbe\061\uffbe\063\uffbe\064\uffbe\001\002\000\004" +
    "\002\241\001\002\000\004\007\202\001\002\000\056\002" +
    "\ufffd\003\ufffd\007\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\040\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\050\ufffd\051\ufffd\055\ufffd\056\ufffd" +
    "\070\ufffd\102\ufffd\001\002\000\004\047\054\001\002\000" +
    "\050\003\032\007\031\013\015\014\012\015\024\016\010" +
    "\017\047\020\051\021\007\040\027\042\043\043\053\044" +
    "\020\045\022\051\017\055\033\056\014\070\044\102\035" +
    "\001\002\000\052\003\032\007\031\013\015\014\012\015" +
    "\024\016\010\017\047\020\051\021\007\040\027\042\043" +
    "\043\053\044\020\045\022\050\057\051\017\055\033\056" +
    "\014\070\044\102\035\001\002\000\056\002\uffff\003\uffff" +
    "\007\uffff\011\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\040\uffff\042\uffff\043\uffff\044\uffff" +
    "\045\uffff\050\uffff\051\uffff\055\uffff\056\uffff\070\uffff\102" +
    "\uffff\001\002\000\004\042\060\001\002\000\004\010\061" +
    "\001\002\000\030\004\064\005\102\006\065\007\071\010" +
    "\070\023\062\037\067\052\073\060\075\075\074\076\076" +
    "\001\002\000\030\004\064\005\102\006\065\007\071\010" +
    "\070\023\062\037\067\052\073\060\075\075\074\076\076" +
    "\001\002\000\050\011\uff9d\012\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\053\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\001\002\000\050\011\uffa4\012\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\053\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\001\002\000\050\011\uffa6\012" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\053" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002\000\050" +
    "\011\uff9e\012\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\053\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\044\004\064\005\102\006\065\007\071\010\070" +
    "\013\015\014\012\015\024\016\010\017\047\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\102\035\001\002" +
    "\000\054\011\uffa2\012\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\053\uffa2\061\155\062\uffa2\063\uffa2\064" +
    "\uffa2\065\uffa2\100\156\001\002\000\050\011\uff9f\012\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\053\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\001\002\000\050\011" +
    "\uffa5\012\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\053\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002" +
    "\000\004\010\152\001\002\000\050\011\uffa3\012\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\053\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\004\010\147" +
    "\001\002\000\050\011\uff9c\012\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\053\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\001\002\000\050\011\uffa0\012\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\053\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\001\002\000\050\011\uffa1\012" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\053" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002\000\050" +
    "\011\uffa7\012\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\053\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\001" +
    "\002\000\040\011\116\012\117\022\114\023\107\024\106" +
    "\025\111\027\120\030\110\031\115\032\122\033\112\034" +
    "\121\035\104\036\105\065\113\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\141\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\032\004\064" +
    "\005\102\006\065\007\071\010\070\022\134\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\001\002\000\030" +
    "\004\064\005\102\006\065\007\071\010\070\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\001\002\000\004" +
    "\063\131\001\002\000\032\004\064\005\102\006\065\007" +
    "\071\010\070\012\126\023\062\037\067\052\073\060\075" +
    "\075\074\076\076\001\002\000\030\004\064\005\102\006" +
    "\065\007\071\010\070\023\062\037\067\052\073\060\075" +
    "\075\074\076\076\001\002\000\030\004\064\005\102\006" +
    "\065\007\071\010\070\023\062\037\067\052\073\060\075" +
    "\075\074\076\076\001\002\000\030\004\064\005\102\006" +
    "\065\007\071\010\070\023\062\037\067\052\073\060\075" +
    "\075\074\076\076\001\002\000\050\011\uffaf\012\117\022" +
    "\114\023\107\024\106\025\111\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\053\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\001\002\000\050\011\uffad" +
    "\012\117\022\114\023\107\024\106\025\111\027\120\030" +
    "\110\031\115\032\122\033\112\034\uffad\035\uffad\036\uffad" +
    "\053\uffad\062\uffad\063\uffad\064\uffad\065\113\001\002\000" +
    "\050\011\uffb2\012\117\022\114\023\107\024\106\025\111" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\053\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\001\002\000\030\004\064\005\102\006\065\007\071\010" +
    "\070\023\062\037\067\052\073\060\075\075\074\076\076" +
    "\001\002\000\050\011\uffb9\012\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\053\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\001\002\000\050\011\uffb8\012\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\053\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\001\002\000\056\002\uffd9\003" +
    "\uffd9\007\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\040\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\050\uffd9\051\uffd9\055\uffd9\056\uffd9\070\uffd9" +
    "\102\uffd9\001\002\000\050\011\uffb0\012\117\022\114\023" +
    "\107\024\106\025\111\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\053\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\001\002\000\050\011\uffbb\012\117" +
    "\022\uffbb\023\uffbb\024\106\025\111\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\053\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\050\011" +
    "\uffb5\012\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\053\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002" +
    "\000\050\011\uffb3\012\117\022\114\023\107\024\106\025" +
    "\111\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\053\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\001\002\000\050\011\uffae\012\117\022\114\023\107" +
    "\024\106\025\111\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\053\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\001\002\000\050\011\uffb7\012\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\053\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000\050\011\uffb1" +
    "\012\117\022\114\023\107\024\106\025\111\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\053\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000" +
    "\074\004\064\005\102\006\065\007\071\010\070\011\uffb4" +
    "\012\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\067\052\073\053\uffb4\060\075\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\075\074\076\076\001\002\000\050\011\uffba" +
    "\012\117\022\uffba\023\uffba\024\106\025\111\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\053\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002\000" +
    "\050\011\uffbc\012\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\053\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\050\011\uffb6\012\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\053\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\001\002\000\050\011\uffab\012\117\022\114" +
    "\023\107\024\106\025\111\027\120\030\110\031\115\032" +
    "\122\033\112\034\uffab\035\uffab\036\uffab\053\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\113\001\002\000\050\011\uffac\012" +
    "\117\022\114\023\107\024\106\025\111\027\120\030\110" +
    "\031\115\032\122\033\112\034\uffac\035\uffac\036\uffac\053" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\113\001\002\000\030" +
    "\004\064\005\102\006\065\007\071\010\070\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\001\002\000\040" +
    "\011\151\012\117\022\114\023\107\024\106\025\111\027" +
    "\120\030\110\031\115\032\122\033\112\034\121\035\104" +
    "\036\105\065\113\001\002\000\050\011\uffc5\012\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\053\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\030\004\064" +
    "\005\102\006\065\007\071\010\070\023\062\037\067\052" +
    "\073\060\075\075\074\076\076\001\002\000\040\011\154" +
    "\012\117\022\114\023\107\024\106\025\111\027\120\030" +
    "\110\031\115\032\122\033\112\034\121\035\104\036\105" +
    "\065\113\001\002\000\050\011\uffc6\012\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\053\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\001\002\000\030\004\064\005\102" +
    "\006\065\007\071\010\070\023\062\037\067\052\073\060" +
    "\075\075\074\076\076\001\002\000\006\073\160\101\157" +
    "\001\002\000\004\010\164\001\002\000\004\010\161\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\040\011\163\012\117\022\114\023\107\024\106" +
    "\025\111\027\120\030\110\031\115\032\122\033\112\034" +
    "\121\035\104\036\105\065\113\001\002\000\050\011\uff9a" +
    "\012\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\053\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\001\002\000" +
    "\030\004\064\005\102\006\065\007\071\010\070\023\062" +
    "\037\067\052\073\060\075\075\074\076\076\001\002\000" +
    "\040\011\166\012\117\022\114\023\107\024\106\025\111" +
    "\027\120\030\110\031\115\032\122\033\112\034\121\035" +
    "\104\036\105\065\113\001\002\000\050\011\uffc4\012\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\053\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000\040\012" +
    "\117\022\114\023\107\024\106\025\111\027\120\030\110" +
    "\031\115\032\122\033\112\034\121\035\104\036\105\062" +
    "\170\065\113\001\002\000\052\011\uff9b\012\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\053\uff9b\061\171" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\001\002\000\030\004" +
    "\064\005\102\006\065\007\071\010\070\023\062\037\067" +
    "\052\073\060\075\075\074\076\076\001\002\000\040\012" +
    "\117\022\114\023\107\024\106\025\111\027\120\030\110" +
    "\031\115\032\122\033\112\034\121\035\104\036\105\062" +
    "\173\065\113\001\002\000\050\011\uff99\012\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\053\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\001\002\000\004\011\177\001" +
    "\002\000\040\011\176\012\117\022\114\023\107\024\106" +
    "\025\111\027\120\030\110\031\115\032\122\033\112\034" +
    "\121\035\104\036\105\065\113\001\002\000\050\011\uffa8" +
    "\012\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\053\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001\002\000" +
    "\030\004\064\005\102\006\065\007\071\010\070\023\062" +
    "\037\067\052\073\060\075\075\074\076\076\001\002\000" +
    "\050\011\uffaa\012\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\053\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\001\002\000\050\011\uffa9\012\117\022\114\023\107\024" +
    "\106\025\111\027\120\030\110\031\115\032\122\033\112" +
    "\034\uffa9\035\uffa9\036\uffa9\053\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\113\001\002\000\004\054\203\001\002\000\016" +
    "\013\015\014\012\015\024\016\010\017\047\102\035\001" +
    "\002\000\010\061\205\063\207\064\206\001\002\000\004" +
    "\062\212\001\002\000\030\004\064\005\102\006\065\007" +
    "\071\010\070\023\062\037\067\052\073\060\075\075\074" +
    "\076\076\001\002\000\102\002\uffe8\003\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\055\uffe8\056\uffe8\060\uffe8\070\uffe8\075" +
    "\uffe8\076\uffe8\102\uffe8\001\002\000\040\012\117\022\114" +
    "\023\107\024\106\025\111\027\120\030\110\031\115\032" +
    "\122\033\112\034\121\035\104\036\105\063\211\065\113" +
    "\001\002\000\102\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea\037\uffea\040" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050\uffea\051\uffea" +
    "\052\uffea\055\uffea\056\uffea\060\uffea\070\uffea\075\uffea\076" +
    "\uffea\102\uffea\001\002\000\006\061\213\064\214\001\002" +
    "\000\004\062\224\001\002\000\004\061\215\001\002\000" +
    "\030\004\064\005\102\006\065\007\071\010\070\023\062" +
    "\037\067\052\073\060\075\075\074\076\076\001\002\000" +
    "\006\053\220\062\221\001\002\000\042\012\117\022\114" +
    "\023\107\024\106\025\111\027\120\030\110\031\115\032" +
    "\122\033\112\034\121\035\104\036\105\053\uffd2\062\uffd2" +
    "\065\113\001\002\000\030\004\064\005\102\006\065\007" +
    "\071\010\070\023\062\037\067\052\073\060\075\075\074" +
    "\076\076\001\002\000\004\063\222\001\002\000\056\002" +
    "\uffce\003\uffce\007\uffce\011\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\040\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\050\uffce\051\uffce\055\uffce\056\uffce" +
    "\070\uffce\102\uffce\001\002\000\042\012\117\022\114\023" +
    "\107\024\106\025\111\027\120\030\110\031\115\032\122" +
    "\033\112\034\121\035\104\036\105\053\uffd3\062\uffd3\065" +
    "\113\001\002\000\004\064\225\001\002\000\004\061\226" +
    "\001\002\000\004\061\227\001\002\000\030\004\064\005" +
    "\102\006\065\007\071\010\070\023\062\037\067\052\073" +
    "\060\075\075\074\076\076\001\002\000\006\053\231\062" +
    "\232\001\002\000\004\061\234\001\002\000\004\063\233" +
    "\001\002\000\056\002\uffcc\003\uffcc\007\uffcc\011\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\050\uffcc\051" +
    "\uffcc\055\uffcc\056\uffcc\070\uffcc\102\uffcc\001\002\000\030" +
    "\004\064\005\102\006\065\007\071\010\070\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\001\002\000\006" +
    "\053\220\062\236\001\002\000\006\053\uffd1\062\uffd1\001" +
    "\002\000\006\053\220\062\240\001\002\000\006\053\uffd0" +
    "\062\uffd0\001\002\000\004\002\001\001\002\000\016\013" +
    "\015\014\012\015\024\016\010\017\047\102\035\001\002" +
    "\000\004\031\244\001\002\000\004\007\245\001\002\000" +
    "\004\064\246\001\002\000\004\071\247\001\002\000\004" +
    "\070\250\001\002\000\004\010\251\001\002\000\004\011" +
    "\252\001\002\000\004\063\253\001\002\000\056\002\uffc9" +
    "\003\uffc9\007\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\040\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\050\uffc9\051\uffc9\055\uffc9\056\uffc9\070" +
    "\uffc9\102\uffc9\001\002\000\030\004\064\005\102\006\065" +
    "\007\071\010\070\023\062\037\067\052\073\060\075\075" +
    "\074\076\076\001\002\000\040\011\256\012\117\022\114" +
    "\023\107\024\106\025\111\027\120\030\110\031\115\032" +
    "\122\033\112\034\121\035\104\036\105\065\113\001\002" +
    "\000\004\047\257\001\002\000\050\003\032\007\031\013" +
    "\015\014\012\015\024\016\010\017\047\020\051\021\007" +
    "\040\027\042\043\043\053\044\020\045\022\051\017\055" +
    "\033\056\014\070\044\102\035\001\002\000\052\003\032" +
    "\007\031\013\015\014\012\015\024\016\010\017\047\020" +
    "\051\021\007\040\027\042\043\043\053\044\020\045\022" +
    "\050\261\051\017\055\033\056\014\070\044\102\035\001" +
    "\002\000\056\002\uffda\003\uffda\007\uffda\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\040" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\050\uffda\051\uffda" +
    "\055\uffda\056\uffda\070\uffda\102\uffda\001\002\000\056\002" +
    "\uffc7\003\uffc7\007\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\050\uffc7\051\uffc7\055\uffc7\056\uffc7" +
    "\070\uffc7\102\uffc7\001\002\000\056\002\uffe4\003\uffe4\007" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\050\uffe4\051\uffe4\055\uffe4\056\uffe4\070\uffe4\102\uffe4" +
    "\001\002\000\056\002\uffed\003\uffed\007\uffed\011\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\040\uffed\042\uffed\043\uffed\044\uffed\045\uffed\050\uffed\051" +
    "\uffed\055\uffed\056\uffed\070\uffed\102\uffed\001\002\000\030" +
    "\004\064\005\102\006\065\007\071\010\070\023\062\037" +
    "\067\052\073\060\075\075\074\076\076\001\002\000\006" +
    "\072\300\073\160\001\002\000\004\022\276\001\002\000" +
    "\030\004\064\005\102\006\065\007\071\010\070\023\062" +
    "\037\067\052\073\060\075\075\074\076\076\001\002\000" +
    "\004\023\272\001\002\000\004\063\273\001\002\000\102" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\023\uffe5\037\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5" +
    "\056\uffe5\060\uffe5\070\uffe5\075\uffe5\076\uffe5\102\uffe5\001" +
    "\002\000\040\012\117\022\114\023\107\024\106\025\111" +
    "\027\120\030\110\031\115\032\122\033\112\034\121\035" +
    "\104\036\105\063\275\065\113\001\002\000\102\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\050\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7" +
    "\060\uffe7\070\uffe7\075\uffe7\076\uffe7\102\uffe7\001\002\000" +
    "\004\063\277\001\002\000\102\002\uffe6\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\055\uffe6\056\uffe6\060\uffe6\070\uffe6" +
    "\075\uffe6\076\uffe6\102\uffe6\001\002\000\004\010\301\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\040\011\303\012\117\022\114\023\107\024\106" +
    "\025\111\027\120\030\110\031\115\032\122\033\112\034" +
    "\121\035\104\036\105\065\113\001\002\000\004\063\304" +
    "\001\002\000\056\002\uffc8\003\uffc8\007\uffc8\011\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\050\uffc8\051" +
    "\uffc8\055\uffc8\056\uffc8\070\uffc8\102\uffc8\001\002\000\040" +
    "\012\117\022\114\023\107\024\106\025\111\027\120\030" +
    "\110\031\115\032\122\033\112\034\121\035\104\036\105" +
    "\062\306\065\113\001\002\000\006\061\307\064\310\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\040\012\117\022\114\023\107\024\106\025\111" +
    "\027\120\030\110\031\115\032\122\033\112\034\121\035" +
    "\104\036\105\063\312\065\113\001\002\000\056\002\uffcb" +
    "\003\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\050\uffcb\051\uffcb\055\uffcb\056\uffcb\070" +
    "\uffcb\102\uffcb\001\002\000\040\012\117\022\114\023\107" +
    "\024\106\025\111\027\120\030\110\031\115\032\122\033" +
    "\112\034\121\035\104\036\105\062\314\065\113\001\002" +
    "\000\004\064\315\001\002\000\030\004\064\005\102\006" +
    "\065\007\071\010\070\023\062\037\067\052\073\060\075" +
    "\075\074\076\076\001\002\000\040\012\117\022\114\023" +
    "\107\024\106\025\111\027\120\030\110\031\115\032\122" +
    "\033\112\034\121\035\104\036\105\063\317\065\113\001" +
    "\002\000\056\002\uffca\003\uffca\007\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\040" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\050\uffca\051\uffca" +
    "\055\uffca\056\uffca\070\uffca\102\uffca\001\002\000\030\004" +
    "\064\005\102\006\065\007\071\010\070\023\062\037\067" +
    "\052\073\060\075\075\074\076\076\001\002\000\040\011" +
    "\322\012\117\022\114\023\107\024\106\025\111\027\120" +
    "\030\110\031\115\032\122\033\112\034\121\035\104\036" +
    "\105\065\113\001\002\000\004\047\323\001\002\000\050" +
    "\003\032\007\031\013\015\014\012\015\024\016\010\017" +
    "\047\020\051\021\007\040\027\042\043\043\053\044\020" +
    "\045\022\051\017\055\033\056\014\070\044\102\035\001" +
    "\002\000\052\003\032\007\031\013\015\014\012\015\024" +
    "\016\010\017\047\020\051\021\007\040\027\042\043\043" +
    "\053\044\020\045\022\050\325\051\017\055\033\056\014" +
    "\070\044\102\035\001\002\000\060\002\uffe2\003\uffe2\007" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\040\uffe2\041\326\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\050\uffe2\051\uffe2\055\uffe2\056\uffe2\070\uffe2" +
    "\102\uffe2\001\002\000\006\040\027\047\327\001\002\000" +
    "\050\003\032\007\031\013\015\014\012\015\024\016\010" +
    "\017\047\020\051\021\007\040\027\042\043\043\053\044" +
    "\020\045\022\051\017\055\033\056\014\070\044\102\035" +
    "\001\002\000\056\002\uffe1\003\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\050\uffe1\051" +
    "\uffe1\055\uffe1\056\uffe1\070\uffe1\102\uffe1\001\002\000\052" +
    "\003\032\007\031\013\015\014\012\015\024\016\010\017" +
    "\047\020\051\021\007\040\027\042\043\043\053\044\020" +
    "\045\022\050\332\051\017\055\033\056\014\070\044\102" +
    "\035\001\002\000\056\002\uffe0\003\uffe0\007\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0" +
    "\051\uffe0\055\uffe0\056\uffe0\070\uffe0\102\uffe0\001\002\000" +
    "\030\004\064\005\102\006\065\007\071\010\070\023\062" +
    "\037\067\052\073\060\075\075\074\076\076\001\002\000" +
    "\040\011\335\012\117\022\114\023\107\024\106\025\111" +
    "\027\120\030\110\031\115\032\122\033\112\034\121\035" +
    "\104\036\105\065\113\001\002\000\004\047\336\001\002" +
    "\000\032\004\064\005\102\006\065\007\071\010\070\023" +
    "\062\037\067\046\341\052\073\060\075\075\074\076\076" +
    "\001\002\000\034\004\064\005\102\006\065\007\071\010" +
    "\070\023\062\037\067\046\341\050\353\052\073\060\075" +
    "\075\074\076\076\001\002\000\034\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\023\uffde\037\uffde\046\uffde\050\uffde" +
    "\052\uffde\060\uffde\075\uffde\076\uffde\001\002\000\004\047" +
    "\350\001\002\000\040\012\117\022\114\023\107\024\106" +
    "\025\111\027\120\030\110\031\115\032\122\033\112\034" +
    "\121\035\104\036\105\064\343\065\113\001\002\000\004" +
    "\031\344\001\002\000\004\047\345\001\002\000\050\003" +
    "\032\007\031\013\015\014\012\015\024\016\010\017\047" +
    "\020\051\021\007\040\027\042\043\043\053\044\020\045" +
    "\022\051\017\055\033\056\014\070\044\102\035\001\002" +
    "\000\052\003\032\007\031\013\015\014\012\015\024\016" +
    "\010\017\047\020\051\021\007\040\027\042\043\043\053" +
    "\044\020\045\022\050\347\051\017\055\033\056\014\070" +
    "\044\102\035\001\002\000\034\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\023\uffdd\037\uffdd\046\uffdd\050\uffdd\052" +
    "\uffdd\060\uffdd\075\uffdd\076\uffdd\001\002\000\050\003\032" +
    "\007\031\013\015\014\012\015\024\016\010\017\047\020" +
    "\051\021\007\040\027\042\043\043\053\044\020\045\022" +
    "\051\017\055\033\056\014\070\044\102\035\001\002\000" +
    "\052\003\032\007\031\013\015\014\012\015\024\016\010" +
    "\017\047\020\051\021\007\040\027\042\043\043\053\044" +
    "\020\045\022\050\352\051\017\055\033\056\014\070\044" +
    "\102\035\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\023\uffdc\037\uffdc\046\uffdc\050\uffdc\052\uffdc" +
    "\060\uffdc\075\uffdc\076\uffdc\001\002\000\056\002\uffdb\003" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\040\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\050\uffdb\051\uffdb\055\uffdb\056\uffdb\070\uffdb" +
    "\102\uffdb\001\002\000\034\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\023\uffdf\037\uffdf\046\uffdf\050\uffdf\052\uffdf" +
    "\060\uffdf\075\uffdf\076\uffdf\001\002\000\010\007\360\020" +
    "\357\021\356\001\002\000\004\007\u010b\001\002\000\004" +
    "\007\u0108\001\002\000\010\022\267\023\271\064\270\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\030\004\064\005\102\006\065\007\071\010\070" +
    "\023\062\037\067\052\073\060\075\075\074\076\076\001" +
    "\002\000\040\012\117\022\114\023\107\024\106\025\111" +
    "\027\120\030\110\031\115\032\122\033\112\034\121\035" +
    "\104\036\105\063\364\065\113\001\002\000\004\007\365" +
    "\001\002\000\010\022\373\023\375\064\374\001\002\000" +
    "\004\011\367\001\002\000\004\047\370\001\002\000\050" +
    "\003\032\007\031\013\015\014\012\015\024\016\010\017" +
    "\047\020\051\021\007\040\027\042\043\043\053\044\020" +
    "\045\022\051\017\055\033\056\014\070\044\102\035\001" +
    "\002\000\052\003\032\007\031\013\015\014\012\015\024" +
    "\016\010\017\047\020\051\021\007\040\027\042\043\043" +
    "\053\044\020\045\022\050\372\051\017\055\033\056\014" +
    "\070\044\102\035\001\002\000\056\002\uffd7\003\uffd7\007" +
    "\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\050\uffd7\051\uffd7\055\uffd7\056\uffd7\070\uffd7\102\uffd7" +
    "\001\002\000\004\022\u0100\001\002\000\030\004\064\005" +
    "\102\006\065\007\071\010\070\023\062\037\067\052\073" +
    "\060\075\075\074\076\076\001\002\000\004\023\376\001" +
    "\002\000\004\011\uffd4\001\002\000\040\011\uffd6\012\117" +
    "\022\114\023\107\024\106\025\111\027\120\030\110\031" +
    "\115\032\122\033\112\034\121\035\104\036\105\065\113" +
    "\001\002\000\004\011\uffd5\001\002\000\040\012\117\022" +
    "\114\023\107\024\106\025\111\027\120\030\110\031\115" +
    "\032\122\033\112\034\121\035\104\036\105\063\u0102\065" +
    "\113\001\002\000\004\007\365\001\002\000\004\011\u0104" +
    "\001\002\000\004\047\u0105\001\002\000\050\003\032\007" +
    "\031\013\015\014\012\015\024\016\010\017\047\020\051" +
    "\021\007\040\027\042\043\043\053\044\020\045\022\051" +
    "\017\055\033\056\014\070\044\102\035\001\002\000\052" +
    "\003\032\007\031\013\015\014\012\015\024\016\010\017" +
    "\047\020\051\021\007\040\027\042\043\043\053\044\020" +
    "\045\022\050\u0107\051\017\055\033\056\014\070\044\102" +
    "\035\001\002\000\056\002\uffd8\003\uffd8\007\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\050\uffd8" +
    "\051\uffd8\055\uffd8\056\uffd8\070\uffd8\102\uffd8\001\002\000" +
    "\004\054\u0109\001\002\000\016\013\015\014\012\015\024" +
    "\016\010\017\047\102\035\001\002\000\006\063\207\064" +
    "\206\001\002\000\004\054\u010c\001\002\000\016\013\015" +
    "\014\012\015\024\016\010\017\047\102\035\001\002\000" +
    "\006\063\u010f\064\u010e\001\002\000\030\004\064\005\102" +
    "\006\065\007\071\010\070\023\062\037\067\052\073\060" +
    "\075\075\074\076\076\001\002\000\102\002\uffe9\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\023\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\070\uffe9\075\uffe9\076\uffe9\102\uffe9\001\002\000\040\012" +
    "\117\022\114\023\107\024\106\025\111\027\120\030\110" +
    "\031\115\032\122\033\112\034\121\035\104\036\105\063" +
    "\u0111\065\113\001\002\000\102\002\uffeb\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\060\uffeb\070\uffeb" +
    "\075\uffeb\076\uffeb\102\uffeb\001\002\000\030\004\064\005" +
    "\102\006\065\007\071\010\070\023\062\037\067\052\073" +
    "\060\075\075\074\076\076\001\002\000\040\011\u0114\012" +
    "\117\022\114\023\107\024\106\025\111\027\120\030\110" +
    "\031\115\032\122\033\112\034\121\035\104\036\105\065" +
    "\113\001\002\000\004\063\u0115\001\002\000\056\002\uffec" +
    "\003\uffec\007\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\050\uffec\051\uffec\055\uffec\056\uffec\070" +
    "\uffec\102\uffec\001\002\000\056\002\uffe3\003\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\050\uffe3\051\uffe3\055\uffe3\056\uffe3\070\uffe3\102\uffe3\001" +
    "\002\000\004\054\u0118\001\002\000\016\013\015\014\012" +
    "\015\024\016\010\017\047\102\035\001\002\000\010\061" +
    "\u011a\063\u010f\064\u010e\001\002\000\004\062\u011b\001\002" +
    "\000\006\061\u011c\064\u011d\001\002\000\004\062\u0122\001" +
    "\002\000\004\061\u011e\001\002\000\030\004\064\005\102" +
    "\006\065\007\071\010\070\023\062\037\067\052\073\060" +
    "\075\075\074\076\076\001\002\000\006\053\220\062\u0120" +
    "\001\002\000\004\063\u0121\001\002\000\056\002\uffcf\003" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\040\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\050\uffcf\051\uffcf\055\uffcf\056\uffcf\070\uffcf" +
    "\102\uffcf\001\002\000\004\064\u0123\001\002\000\004\061" +
    "\u0124\001\002\000\004\061\227\001\002\000\006\053\231" +
    "\062\u0126\001\002\000\004\063\u0127\001\002\000\056\002" +
    "\uffcd\003\uffcd\007\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\040\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\050\uffcd\051\uffcd\055\uffcd\056\uffcd" +
    "\070\uffcd\102\uffcd\001\002\000\004\010\u0129\001\002\000" +
    "\004\011\u012a\001\002\000\004\047\u012b\001\002\000\050" +
    "\003\032\007\031\013\015\014\012\015\024\016\010\017" +
    "\047\020\051\021\007\040\027\042\043\043\053\044\020" +
    "\045\022\051\017\055\033\056\014\070\044\102\035\001" +
    "\002\000\052\003\032\007\031\011\u012d\013\015\014\012" +
    "\015\024\016\010\017\047\020\051\021\007\040\027\042" +
    "\043\043\053\044\020\045\022\051\017\055\033\056\014" +
    "\070\044\102\035\001\002\000\056\002\uffc3\003\uffc3\007" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\050\uffc3\051\uffc3\055\uffc3\056\uffc3\070\uffc3\102\uffc3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\054\002\047\003\020\005\015\006\044\007" +
    "\027\010\035\011\010\013\022\015\033\016\024\017\051" +
    "\023\040\024\037\027\003\030\036\031\045\032\025\033" +
    "\004\036\041\040\012\041\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\005\055" +
    "\006\044\007\027\010\035\011\010\013\022\015\033\016" +
    "\024\017\051\023\040\024\037\027\003\030\036\031\045" +
    "\032\025\033\004\036\041\040\012\041\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\054\005\015\006\044\007\027\010\035\011\010" +
    "\013\022\015\033\016\024\017\051\023\040\024\037\027" +
    "\003\030\036\031\045\032\025\033\004\036\041\040\012" +
    "\041\005\001\001\000\050\005\055\006\044\007\027\010" +
    "\035\011\010\013\022\015\033\016\024\017\051\023\040" +
    "\024\037\027\003\030\036\031\045\032\025\033\004\036" +
    "\041\040\012\041\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\065\022" +
    "\062\034\102\035\100\036\077\037\076\001\001\000\020" +
    "\020\071\021\065\022\062\034\142\035\100\036\077\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\065\022" +
    "\062\034\200\035\100\036\077\037\076\001\001\000\022" +
    "\020\071\021\065\022\062\034\174\035\100\036\077\037" +
    "\076\041\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\071\021\065\022\062\034\145\035\100\036\077\037\076" +
    "\001\001\000\020\020\071\021\065\022\062\034\144\035" +
    "\100\036\077\037\076\001\001\000\020\020\071\021\065" +
    "\022\062\034\143\035\100\036\077\037\076\001\001\000" +
    "\020\020\071\021\065\022\062\034\141\035\100\036\077" +
    "\037\076\001\001\000\020\020\071\021\065\022\062\034" +
    "\137\035\100\036\077\037\076\001\001\000\020\020\071" +
    "\021\065\022\062\034\136\035\100\036\077\037\076\001" +
    "\001\000\020\020\071\021\065\022\062\034\135\035\100" +
    "\036\077\037\076\001\001\000\020\020\071\021\065\022" +
    "\062\034\134\035\100\036\077\037\076\001\001\000\020" +
    "\020\071\021\065\022\062\034\132\035\100\036\077\037" +
    "\076\001\001\000\020\020\071\021\065\022\062\034\131" +
    "\035\100\036\077\037\076\001\001\000\002\001\001\000" +
    "\020\020\071\021\065\022\062\034\126\035\100\036\077" +
    "\037\076\001\001\000\020\020\071\021\065\022\062\034" +
    "\124\035\100\036\077\037\076\001\001\000\020\020\071" +
    "\021\065\022\062\034\123\035\100\036\077\037\076\001" +
    "\001\000\020\020\071\021\065\022\062\034\122\035\100" +
    "\036\077\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\071\021\065\022\062" +
    "\034\127\035\100\036\077\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\071\021\065\022\062\034\142\035\100\036\077\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\071\021\065\022\062\034\147\035\100\036\077\037\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\071\021\065\022\062\034\152\035\100\036\077\037\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\071\021\065\022\062\034\166\035\100\036\077\037\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\071\021\065\022\062\034\161\035\100" +
    "\036\077\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\071\021\065\022\062\034\164\035\100" +
    "\036\077\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\071" +
    "\021\065\022\062\034\171\035\100\036\077\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\071\021" +
    "\065\022\062\034\177\035\100\036\077\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\071\021\065\022\062\034\207\035\100\036" +
    "\077\037\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\071\021\065\022\062\025\215" +
    "\034\216\035\100\036\077\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\071\021\065\022\062" +
    "\034\222\035\100\036\077\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\227\001\001\000\022\020" +
    "\071\021\065\022\062\025\236\034\216\035\100\036\077" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\071\021\065" +
    "\022\062\025\234\034\216\035\100\036\077\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\071\021\065\022\062\034\254\035\100\036\077\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\257\005\015\006\044\007\027\010\035\011\010\013" +
    "\022\015\033\016\024\017\051\023\040\024\037\027\003" +
    "\030\036\031\045\032\025\033\004\036\041\040\012\041" +
    "\005\001\001\000\050\005\055\006\044\007\027\010\035" +
    "\011\010\013\022\015\033\016\024\017\051\023\040\024" +
    "\037\027\003\030\036\031\045\032\025\033\004\036\041" +
    "\040\012\041\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\071" +
    "\021\065\022\062\034\304\035\100\036\077\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\071" +
    "\021\065\022\062\034\273\035\100\036\077\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\071\021\065" +
    "\022\062\034\301\035\100\036\077\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\065\022" +
    "\062\034\312\035\100\036\077\037\076\001\001\000\020" +
    "\020\071\021\065\022\062\034\310\035\100\036\077\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\065\022" +
    "\062\034\315\035\100\036\077\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\065\022" +
    "\062\034\320\035\100\036\077\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\323\005\015\006" +
    "\044\007\027\010\035\011\010\013\022\015\033\016\024" +
    "\017\051\023\040\024\037\027\003\030\036\031\045\032" +
    "\025\033\004\036\041\040\012\041\005\001\001\000\050" +
    "\005\055\006\044\007\027\010\035\011\010\013\022\015" +
    "\033\016\024\017\051\023\040\024\037\027\003\030\036" +
    "\031\045\032\025\033\004\036\041\040\012\041\005\001" +
    "\001\000\002\001\001\000\004\006\327\001\001\000\052" +
    "\003\330\005\015\006\044\007\027\010\035\011\010\013" +
    "\022\015\033\016\024\017\051\023\040\024\037\027\003" +
    "\030\036\031\045\032\025\033\004\036\041\040\012\041" +
    "\005\001\001\000\002\001\001\000\050\005\055\006\044" +
    "\007\027\010\035\011\010\013\022\015\033\016\024\017" +
    "\051\023\040\024\037\027\003\030\036\031\045\032\025" +
    "\033\004\036\041\040\012\041\005\001\001\000\002\001" +
    "\001\000\020\020\071\021\065\022\062\034\333\035\100" +
    "\036\077\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\336\012\337\020\071\021\065\022\062" +
    "\034\341\035\100\036\077\037\076\001\001\000\022\012" +
    "\353\020\071\021\065\022\062\034\341\035\100\036\077" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\345\005\015\006\044\007\027\010\035\011\010\013" +
    "\022\015\033\016\024\017\051\023\040\024\037\027\003" +
    "\030\036\031\045\032\025\033\004\036\041\040\012\041" +
    "\005\001\001\000\050\005\055\006\044\007\027\010\035" +
    "\011\010\013\022\015\033\016\024\017\051\023\040\024" +
    "\037\027\003\030\036\031\045\032\025\033\004\036\041" +
    "\040\012\041\005\001\001\000\002\001\001\000\052\003" +
    "\350\005\015\006\044\007\027\010\035\011\010\013\022" +
    "\015\033\016\024\017\051\023\040\024\037\027\003\030" +
    "\036\031\045\032\025\033\004\036\041\040\012\041\005" +
    "\001\001\000\050\005\055\006\044\007\027\010\035\011" +
    "\010\013\022\015\033\016\024\017\051\023\040\024\037" +
    "\027\003\030\036\031\045\032\025\033\004\036\041\040" +
    "\012\041\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\360\024\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\071\021\065\022\062\034\u0100\035\100\036\077\037" +
    "\076\001\001\000\020\020\071\021\065\022\062\034\362" +
    "\035\100\036\077\037\076\001\001\000\002\001\001\000" +
    "\004\014\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\370\005\015\006\044\007" +
    "\027\010\035\011\010\013\022\015\033\016\024\017\051" +
    "\023\040\024\037\027\003\030\036\031\045\032\025\033" +
    "\004\036\041\040\012\041\005\001\001\000\050\005\055" +
    "\006\044\007\027\010\035\011\010\013\022\015\033\016" +
    "\024\017\051\023\040\024\037\027\003\030\036\031\045" +
    "\032\025\033\004\036\041\040\012\041\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\071\021\065" +
    "\022\062\034\376\035\100\036\077\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u0105\005\015" +
    "\006\044\007\027\010\035\011\010\013\022\015\033\016" +
    "\024\017\051\023\040\024\037\027\003\030\036\031\045" +
    "\032\025\033\004\036\041\040\012\041\005\001\001\000" +
    "\050\005\055\006\044\007\027\010\035\011\010\013\022" +
    "\015\033\016\024\017\051\023\040\024\037\027\003\030" +
    "\036\031\045\032\025\033\004\036\041\040\012\041\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u010c\001\001\000\002\001\001\000\020\020\071\021" +
    "\065\022\062\034\u010f\035\100\036\077\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\071\021\065\022\062\034\u0112\035\100\036\077" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\020\071\021\065\022\062\025\u011e\034\216\035\100\036" +
    "\077\037\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u012b\005\015\006\044\007\027" +
    "\010\035\011\010\013\022\015\033\016\024\017\051\023" +
    "\040\024\037\027\003\030\036\031\045\032\025\033\004" +
    "\036\041\040\012\041\005\001\001\000\050\005\055\006" +
    "\044\007\027\010\035\011\010\013\022\015\033\016\024" +
    "\017\051\023\040\024\037\027\003\030\036\031\045\032" +
    "\025\033\004\036\041\040\012\041\005\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", No Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SCONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGN_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= AGREGAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ELIMINAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= error FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PRINT ::= PRINTLN LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		     RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, b, c, a, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, b, c, a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= ID IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= ID MAS MAS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID MENOS MENOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SBREAK ::= BREAK FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SBREAK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SCONTINUAR ::= CONTINUE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCONTINUAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASOS ::= CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASO ::= EXPRESION IGUAL MAYOR LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Caso(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASO ::= DEFAULT LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DefaultCase(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SMATCH ::= MATCH LPAREN EXPRESION RPAREN LBRACE CASOS RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Match(a, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SMATCH",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWHILE ::= WHILE LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new While(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWHILE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SDO ::= DO LBRACE INSTRUCCIONES RBRACE WHILE LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SFOR ::= FOR LPAREN DECLARACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SFOR ::= FOR LPAREN ASIGNACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REFRESH_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REFRESH_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REFRESH_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA ::= LISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MATRIZ ::= MATRIZ COMA LSQUARE LISTA RSQUARE 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList> a = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MATRIZ ::= LSQUARE LISTA RSQUARE 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE LSQUARE RSQUARE IGUAL LSQUARE MATRIZ RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList> c = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecMatriz(TipoDeDato.MATRIZ, true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE LSQUARE RSQUARE IGUAL LSQUARE MATRIZ RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList> c = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecMatriz(TipoDeDato.MATRIZ, false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGN_VECTOR ::= ID LSQUARE EXPRESION RSQUARE IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AsignacionValorEnPosicion(a, c, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VECTOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGN_VECTOR ::= ID LSQUARE EXPRESION RSQUARE LSQUARE EXPRESION RSQUARE IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AsignValorMatriz(a, b, c, d, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VECTOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEC_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST LPAREN RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		  RESULT = new DecColeccion(TipoDeDato.LIST, a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AGREGAR ::= ID PUNTO APPEND LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Append(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AGREGAR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELIMINAR ::= EXPR3 FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIMINAR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FROUND ::= ROUND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FRound(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FROUND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FLENGTH ::= LENGTH LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FLength(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FLENGTH",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FFIND ::= ID PUNTO FIND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FBuscar(a, b, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FFIND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO ::= TIPOS ID LPAREN RPAREN LBRACE INSTRUCCIONES RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Metodo(b, c, a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.INT);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.DOUBLE);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.BOOLEAN);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.CHAR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.STRING);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.VOID);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION TIMES TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.INCREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.DECREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.IGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION NE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.DIFERENCIACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= LPAREN TIPOS RPAREN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Casteo(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, OpLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean((String) a), new Tipo(TipoDeDato.BOOLEAN), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPR3 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= FROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= FLENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= FFIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPR4 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR2 ::= ID LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorVector(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPR3 ::= ID PUNTO REMOVE LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Remove(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR3",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR4 ::= ID LSQUARE EXPRESION RSQUARE LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorMatriz(a, c, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR4",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
