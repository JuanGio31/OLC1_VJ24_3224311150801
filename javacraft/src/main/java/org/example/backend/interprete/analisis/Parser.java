
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.backend.interprete.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import org.example.backend.interprete.abstracto.Instruccion;
import org.example.backend.interprete.expresion.*;
import org.example.backend.interprete.error.*;
import org.example.backend.interprete.simbol.*;
import org.example.backend.interprete.instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\017\007\000\002" +
    "\023\011\000\002\023\011\000\002\023\007\000\002\023" +
    "\007\000\002\024\006\000\002\024\006\000\002\024\006" +
    "\000\002\007\004\000\002\010\004\000\002\006\011\000" +
    "\002\006\013\000\002\006\015\000\002\004\004\000\002" +
    "\004\003\000\002\012\010\000\002\012\006\000\002\011" +
    "\011\000\002\015\011\000\002\016\013\000\002\013\014" +
    "\000\002\013\014\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\025\005\000\002\025\003\000\002" +
    "\026\007\000\002\026\005\000\002\031\015\000\002\031" +
    "\015\000\002\031\017\000\002\031\017\000\002\032\011" +
    "\000\002\032\014\000\002\033\015\000\002\034\011\000" +
    "\002\035\004\000\002\020\006\000\002\021\006\000\002" +
    "\022\010\000\002\043\011\000\002\043\012\000\002\027" +
    "\006\000\002\027\004\000\002\044\010\000\002\044\007" +
    "\000\002\030\005\000\002\030\003\000\002\046\004\000" +
    "\002\045\005\000\002\045\004\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\036\004\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\006\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\006\000\002\036\004\000\002\036\005\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\006\000\002\040\010\000\002\041\011\000\002\042" +
    "\006\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\054\003\035\007\032\013\015\014\012\015" +
    "\025\016\010\017\055\020\057\021\007\040\030\042\050" +
    "\043\061\044\020\045\022\051\017\055\036\056\014\057" +
    "\034\070\051\102\040\103\047\001\002\000\060\002\ufff3" +
    "\003\ufff3\007\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\050\ufff3\051\ufff3\055\ufff3\056\ufff3\057\ufff3\070" +
    "\ufff3\102\ufff3\103\ufff3\001\002\000\060\002\uffef\003\uffef" +
    "\007\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef" +
    "\050\uffef\051\uffef\055\uffef\056\uffef\057\uffef\070\uffef\102" +
    "\uffef\103\uffef\001\002\000\004\007\u0141\001\002\000\004" +
    "\007\u0130\001\002\000\016\007\uffb2\011\uffb2\031\uffb2\061" +
    "\uffb2\063\uffb2\064\uffb2\001\002\000\060\002\ufff7\003\ufff7" +
    "\007\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\050\ufff7\051\ufff7\055\ufff7\056\ufff7\057\ufff7\070\ufff7\102" +
    "\ufff7\103\ufff7\001\002\000\016\007\uffb4\011\uffb4\031\uffb4" +
    "\061\uffb4\063\uffb4\064\uffb4\001\002\000\060\002\uffee\003" +
    "\uffee\007\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\050\uffee\051\uffee\055\uffee\056\uffee\057\uffee\070\uffee" +
    "\102\uffee\103\uffee\001\002\000\004\063\u012f\001\002\000" +
    "\016\007\uffb5\011\uffb5\031\uffb5\061\uffb5\063\uffb5\064\uffb5" +
    "\001\002\000\060\002\ufffe\003\ufffe\007\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe\051\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\070\ufffe\102\ufffe\103\ufffe\001\002" +
    "\000\004\010\u012b\001\002\000\004\010\u0106\001\002\000" +
    "\056\002\000\003\035\007\032\013\015\014\012\015\025" +
    "\016\010\017\055\020\057\021\007\040\030\042\050\043" +
    "\061\044\020\045\022\051\017\055\036\056\014\057\034" +
    "\070\051\102\040\103\047\001\002\000\004\010\364\001" +
    "\002\000\060\002\ufff5\003\ufff5\007\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\040\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\050\ufff5\051\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\070\ufff5\102\ufff5\103\ufff5\001\002\000" +
    "\060\002\ufff4\003\ufff4\007\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\040\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\070\ufff4\102\ufff4\103\ufff4\001\002\000\016\007" +
    "\uffb3\011\uffb3\031\uffb3\061\uffb3\063\uffb3\064\uffb3\001\002" +
    "\000\060\002\ufff0\003\ufff0\007\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\040\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\050\ufff0\051\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\070\ufff0\102\ufff0\103\ufff0\001\002\000\060" +
    "\002\uffed\003\uffed\007\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\040\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\050\uffed\051\uffed\055\uffed\056\uffed\057" +
    "\uffed\070\uffed\102\uffed\103\uffed\001\002\000\004\010\351" +
    "\001\002\000\060\002\ufff9\003\ufff9\007\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\040\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\070\ufff9\102\ufff9\103\ufff9\001\002" +
    "\000\016\010\166\022\320\023\322\061\316\064\321\100" +
    "\317\001\002\000\060\002\uffec\003\uffec\007\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\050\uffec\051\uffec" +
    "\055\uffec\056\uffec\057\uffec\070\uffec\102\uffec\103\uffec\001" +
    "\002\000\032\004\072\005\111\006\073\007\077\010\076" +
    "\023\070\037\075\052\101\060\103\063\314\075\102\076" +
    "\104\001\002\000\004\063\312\001\002\000\004\063\311" +
    "\001\002\000\060\002\ufff6\003\ufff6\007\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\040\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\051\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\070\ufff6\102\ufff6\103\ufff6\001\002" +
    "\000\016\007\uffb0\011\uffb0\031\uffb0\061\uffb0\063\uffb0\064" +
    "\uffb0\001\002\000\060\002\ufff8\003\ufff8\007\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\070\ufff8\102\ufff8\103\ufff8\001" +
    "\002\000\060\002\ufff2\003\ufff2\007\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\040\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2\051\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\070\ufff2\102\ufff2\103\ufff2\001\002\000" +
    "\060\002\ufffb\003\ufffb\007\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\040\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\050\ufffb\051\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\070\ufffb\102\ufffb\103\ufffb\001\002\000\004\063" +
    "\310\001\002\000\060\002\ufffc\003\ufffc\007\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\040" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\050\ufffc\051\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\070\ufffc\102\ufffc\103\ufffc\001" +
    "\002\000\004\063\307\001\002\000\004\007\300\001\002" +
    "\000\004\010\272\001\002\000\004\030\260\001\002\000" +
    "\060\002\uffeb\003\uffeb\007\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\040\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\050\uffeb\051\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\070\uffeb\102\uffeb\103\uffeb\001\002\000\060\002" +
    "\ufffa\003\ufffa\007\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\040\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\050\ufffa\051\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\070\ufffa\102\ufffa\103\ufffa\001\002\000\060\002\ufff1\003" +
    "\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\050\ufff1\051\ufff1\055\ufff1\056\ufff1\057\ufff1\070\ufff1" +
    "\102\ufff1\103\ufff1\001\002\000\016\007\uffb1\011\uffb1\031" +
    "\uffb1\061\uffb1\063\uffb1\064\uffb1\001\002\000\004\002\257" +
    "\001\002\000\004\007\220\001\002\000\060\002\ufffd\003" +
    "\ufffd\007\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\050\ufffd\051\ufffd\055\ufffd\056\ufffd\057\ufffd\070\ufffd" +
    "\102\ufffd\103\ufffd\001\002\000\004\047\062\001\002\000" +
    "\054\003\035\007\032\013\015\014\012\015\025\016\010" +
    "\017\055\020\057\021\007\040\030\042\050\043\061\044" +
    "\020\045\022\051\017\055\036\056\014\057\034\070\051" +
    "\102\040\103\047\001\002\000\056\003\035\007\032\013" +
    "\015\014\012\015\025\016\010\017\055\020\057\021\007" +
    "\040\030\042\050\043\061\044\020\045\022\050\065\051" +
    "\017\055\036\056\014\057\034\070\051\102\040\103\047" +
    "\001\002\000\060\002\uffff\003\uffff\007\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\040\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\050\uffff\051\uffff\055" +
    "\uffff\056\uffff\057\uffff\070\uffff\102\uffff\103\uffff\001\002" +
    "\000\004\042\066\001\002\000\004\010\067\001\002\000" +
    "\030\004\072\005\111\006\073\007\077\010\076\023\070" +
    "\037\075\052\101\060\103\075\102\076\104\001\002\000" +
    "\030\004\072\005\111\006\073\007\077\010\076\023\070" +
    "\037\075\052\101\060\103\075\102\076\104\001\002\000" +
    "\050\011\uff90\012\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\036\uff90\053\uff90\062\uff90\063\uff90\064\uff90\065\uff90" +
    "\001\002\000\050\011\uff97\012\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\053\uff97\062\uff97\063\uff97\064" +
    "\uff97\065\uff97\001\002\000\050\011\uff99\012\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\053\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\001\002\000\050\011\uff91\012" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\053" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\044" +
    "\004\072\005\111\006\073\007\077\010\076\013\015\014" +
    "\012\015\025\016\010\017\055\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\102\040\001\002\000\056\010" +
    "\166\011\uff95\012\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\053\uff95\061\164\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\100\165\001\002\000\050\011\uff92\012\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\053\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\001\002\000\050\011\uff98" +
    "\012\uff98\022\uff98\023\uff98\024\uff98\025\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\053\uff98\062\uff98\063\uff98\064\uff98\065\uff98\001\002\000" +
    "\004\010\161\001\002\000\050\011\uff96\012\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\053\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\001\002\000\004\010\156\001" +
    "\002\000\050\011\uff8e\012\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\053\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\001\002\000\050\011\uff8f\012\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\053\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\001\002\000\050\011\uff93\012\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\053\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\001\002\000\050\011" +
    "\uff94\012\uff94\022\uff94\023\uff94\024\uff94\025\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\053\uff94\062\uff94\063\uff94\064\uff94\065\uff94\001\002" +
    "\000\050\011\uff9a\012\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\053\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\001\002\000\040\011\125\012\126\022\123\023\116" +
    "\024\115\025\121\027\127\030\117\031\124\032\131\033" +
    "\120\034\130\035\113\036\114\065\122\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\150\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\032" +
    "\004\072\005\111\006\073\007\077\010\076\022\143\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\030\004\072\005\111\006\073\007\077\010\076\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\004\063\140\001\002\000\032\004\072\005\111\006" +
    "\073\007\077\010\076\012\135\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\030\004\072\005" +
    "\111\006\073\007\077\010\076\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\030\004\072\005" +
    "\111\006\073\007\077\010\076\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\030\004\072\005" +
    "\111\006\073\007\077\010\076\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\050\011\uffa2\012" +
    "\126\022\123\023\116\024\115\025\121\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\053" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002\000\050" +
    "\011\uffa0\012\126\022\123\023\116\024\115\025\121\027" +
    "\127\030\117\031\124\032\131\033\120\034\uffa0\035\uffa0" +
    "\036\uffa0\053\uffa0\062\uffa0\063\uffa0\064\uffa0\065\122\001" +
    "\002\000\050\011\uffa5\012\126\022\123\023\116\024\115" +
    "\025\121\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\053\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\001\002\000\030\004\072\005\111\006\073\007" +
    "\077\010\076\023\070\037\075\052\101\060\103\075\102" +
    "\076\104\001\002\000\050\011\uffac\012\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\053\uffac\062\uffac\063" +
    "\uffac\064\uffac\065\uffac\001\002\000\050\011\uffab\012\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\053\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\001\002\000\060\002" +
    "\uffd6\003\uffd6\007\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\040\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\050\uffd6\051\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\070\uffd6\102\uffd6\103\uffd6\001\002\000\050\011\uffa3\012" +
    "\126\022\123\023\116\024\115\025\121\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\053" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\050" +
    "\011\uffae\012\126\022\uffae\023\uffae\024\115\025\121\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\053\uffae\062\uffae\063\uffae\064\uffae\065\uffae\001" +
    "\002\000\050\011\uffa8\012\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\053\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\001\002\000\050\011\uffa6\012\126\022\123\023" +
    "\116\024\115\025\121\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\053\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\001\002\000\050\011\uffaa\012\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\053\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\001\002\000\050\011" +
    "\uffa1\012\126\022\123\023\116\024\115\025\121\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\053\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002" +
    "\000\050\011\uffa4\012\126\022\123\023\116\024\115\025" +
    "\121\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\053\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\001\002\000\074\004\072\005\111\006\073\007\077" +
    "\010\076\011\uffa7\012\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\075\052\101\053\uffa7\060\103\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\075\102\076\104\001\002" +
    "\000\050\011\uffad\012\126\022\uffad\023\uffad\024\115\025" +
    "\121\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\053\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\001\002\000\050\011\uffaf\012\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\053\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\001\002\000\050\011\uffa9\012\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\053\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\001\002\000\050\011\uff9e" +
    "\012\126\022\123\023\116\024\115\025\121\027\127\030" +
    "\117\031\124\032\131\033\120\034\uff9e\035\uff9e\036\uff9e" +
    "\053\uff9e\062\uff9e\063\uff9e\064\uff9e\065\122\001\002\000" +
    "\050\011\uff9f\012\126\022\123\023\116\024\115\025\121" +
    "\027\127\030\117\031\124\032\131\033\120\034\uff9f\035" +
    "\uff9f\036\uff9f\053\uff9f\062\uff9f\063\uff9f\064\uff9f\065\122" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\040\011\160\012\126\022\123\023\116\024" +
    "\115\025\121\027\127\030\117\031\124\032\131\033\120" +
    "\034\130\035\113\036\114\065\122\001\002\000\050\011" +
    "\uffc2\012\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\053\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002" +
    "\000\030\004\072\005\111\006\073\007\077\010\076\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\040\011\163\012\126\022\123\023\116\024\115\025" +
    "\121\027\127\030\117\031\124\032\131\033\120\034\130" +
    "\035\113\036\114\065\122\001\002\000\050\011\uffc3\012" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\053" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\006" +
    "\073\176\101\175\001\002\000\032\004\072\005\111\006" +
    "\073\007\077\010\076\011\167\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\050\011\uff89\012" +
    "\uff89\022\uff89\023\uff89\024\uff89\025\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\053" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\001\002\000\006" +
    "\011\173\053\172\001\002\000\042\011\uffb9\012\126\022" +
    "\123\023\116\024\115\025\121\027\127\030\117\031\124" +
    "\032\131\033\120\034\130\035\113\036\114\053\uffb9\065" +
    "\122\001\002\000\030\004\072\005\111\006\073\007\077" +
    "\010\076\023\070\037\075\052\101\060\103\075\102\076" +
    "\104\001\002\000\050\011\uff8a\012\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\025\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\053\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\001\002\000\042\011\uffba\012\126\022" +
    "\123\023\116\024\115\025\121\027\127\030\117\031\124" +
    "\032\131\033\120\034\130\035\113\036\114\053\uffba\065" +
    "\122\001\002\000\004\010\202\001\002\000\004\010\177" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\040\011\201\012\126\022\123\023\116\024" +
    "\115\025\121\027\127\030\117\031\124\032\131\033\120" +
    "\034\130\035\113\036\114\065\122\001\002\000\050\011" +
    "\uff8c\012\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\053\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\001\002" +
    "\000\030\004\072\005\111\006\073\007\077\010\076\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\040\011\204\012\126\022\123\023\116\024\115\025" +
    "\121\027\127\030\117\031\124\032\131\033\120\034\130" +
    "\035\113\036\114\065\122\001\002\000\050\011\uffc1\012" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002\000\040" +
    "\012\126\022\123\023\116\024\115\025\121\027\127\030" +
    "\117\031\124\032\131\033\120\034\130\035\113\036\114" +
    "\062\206\065\122\001\002\000\052\011\uff8d\012\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\053\uff8d\061" +
    "\207\062\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002\000\030" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\052\101\060\103\075\102\076\104\001\002\000\040" +
    "\012\126\022\123\023\116\024\115\025\121\027\127\030" +
    "\117\031\124\032\131\033\120\034\130\035\113\036\114" +
    "\062\211\065\122\001\002\000\050\011\uff8b\012\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\053\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002\000\004\011\215" +
    "\001\002\000\040\011\214\012\126\022\123\023\116\024" +
    "\115\025\121\027\127\030\117\031\124\032\131\033\120" +
    "\034\130\035\113\036\114\065\122\001\002\000\050\011" +
    "\uff9b\012\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\053\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\001\002" +
    "\000\030\004\072\005\111\006\073\007\077\010\076\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\050\011\uff9d\012\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\053\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\001\002\000\050\011\uff9c\012\126\022\123\023\116" +
    "\024\115\025\121\027\127\030\117\031\124\032\131\033" +
    "\120\034\uff9c\035\uff9c\036\uff9c\053\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\122\001\002\000\004\054\221\001\002\000" +
    "\016\013\015\014\012\015\025\016\010\017\055\102\040" +
    "\001\002\000\010\061\223\063\225\064\224\001\002\000" +
    "\004\062\230\001\002\000\030\004\072\005\111\006\073" +
    "\007\077\010\076\023\070\037\075\052\101\060\103\075" +
    "\102\076\104\001\002\000\104\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\037\uffe5" +
    "\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\070\uffe5" +
    "\075\uffe5\076\uffe5\102\uffe5\103\uffe5\001\002\000\040\012" +
    "\126\022\123\023\116\024\115\025\121\027\127\030\117" +
    "\031\124\032\131\033\120\034\130\035\113\036\114\063" +
    "\227\065\122\001\002\000\104\002\uffe7\003\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\037\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\070\uffe7" +
    "\075\uffe7\076\uffe7\102\uffe7\103\uffe7\001\002\000\006\061" +
    "\231\064\232\001\002\000\004\062\242\001\002\000\004" +
    "\061\233\001\002\000\030\004\072\005\111\006\073\007" +
    "\077\010\076\023\070\037\075\052\101\060\103\075\102" +
    "\076\104\001\002\000\006\053\236\062\237\001\002\000" +
    "\042\012\126\022\123\023\116\024\115\025\121\027\127" +
    "\030\117\031\124\032\131\033\120\034\130\035\113\036" +
    "\114\053\uffcf\062\uffcf\065\122\001\002\000\030\004\072" +
    "\005\111\006\073\007\077\010\076\023\070\037\075\052" +
    "\101\060\103\075\102\076\104\001\002\000\004\063\240" +
    "\001\002\000\060\002\uffcb\003\uffcb\007\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\040\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\050\uffcb\051\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\070\uffcb\102\uffcb\103\uffcb\001\002" +
    "\000\042\012\126\022\123\023\116\024\115\025\121\027" +
    "\127\030\117\031\124\032\131\033\120\034\130\035\113" +
    "\036\114\053\uffd0\062\uffd0\065\122\001\002\000\004\064" +
    "\243\001\002\000\004\061\244\001\002\000\004\061\245" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\006\053\247\062\250\001\002\000\004\061" +
    "\252\001\002\000\004\063\251\001\002\000\060\002\uffc9" +
    "\003\uffc9\007\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\050\uffc9\051\uffc9\055\uffc9\056\uffc9\057\uffc9\070" +
    "\uffc9\102\uffc9\103\uffc9\001\002\000\030\004\072\005\111" +
    "\006\073\007\077\010\076\023\070\037\075\052\101\060" +
    "\103\075\102\076\104\001\002\000\006\053\236\062\254" +
    "\001\002\000\006\053\uffce\062\uffce\001\002\000\006\053" +
    "\236\062\256\001\002\000\006\053\uffcd\062\uffcd\001\002" +
    "\000\004\002\001\001\002\000\016\013\015\014\012\015" +
    "\025\016\010\017\055\102\040\001\002\000\004\031\262" +
    "\001\002\000\004\007\263\001\002\000\004\064\264\001" +
    "\002\000\004\071\265\001\002\000\004\070\266\001\002" +
    "\000\004\010\267\001\002\000\004\011\270\001\002\000" +
    "\004\063\271\001\002\000\060\002\uffc6\003\uffc6\007\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\050\uffc6" +
    "\051\uffc6\055\uffc6\056\uffc6\057\uffc6\070\uffc6\102\uffc6\103" +
    "\uffc6\001\002\000\030\004\072\005\111\006\073\007\077" +
    "\010\076\023\070\037\075\052\101\060\103\075\102\076" +
    "\104\001\002\000\040\011\274\012\126\022\123\023\116" +
    "\024\115\025\121\027\127\030\117\031\124\032\131\033" +
    "\120\034\130\035\113\036\114\065\122\001\002\000\004" +
    "\047\275\001\002\000\054\003\035\007\032\013\015\014" +
    "\012\015\025\016\010\017\055\020\057\021\007\040\030" +
    "\042\050\043\061\044\020\045\022\051\017\055\036\056" +
    "\014\057\034\070\051\102\040\103\047\001\002\000\056" +
    "\003\035\007\032\013\015\014\012\015\025\016\010\017" +
    "\055\020\057\021\007\040\030\042\050\043\061\044\020" +
    "\045\022\050\277\051\017\055\036\056\014\057\034\070" +
    "\051\102\040\103\047\001\002\000\060\002\uffd7\003\uffd7" +
    "\007\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\050\uffd7\051\uffd7\055\uffd7\056\uffd7\057\uffd7\070\uffd7\102" +
    "\uffd7\103\uffd7\001\002\000\004\010\301\001\002\000\032" +
    "\004\072\005\111\006\073\007\077\010\076\011\302\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\004\063\306\001\002\000\006\011\304\053\172\001" +
    "\002\000\004\063\305\001\002\000\060\002\uffbc\003\uffbc" +
    "\007\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\040\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\050\uffbc\051\uffbc\055\uffbc\056\uffbc\057\uffbc\070\uffbc\102" +
    "\uffbc\103\uffbc\001\002\000\060\002\uffbb\003\uffbb\007\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\050\uffbb" +
    "\051\uffbb\055\uffbb\056\uffbb\057\uffbb\070\uffbb\102\uffbb\103" +
    "\uffbb\001\002\000\060\002\uffc4\003\uffc4\007\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\050\uffc4\051\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\070\uffc4\102\uffc4\103\uffc4\001" +
    "\002\000\060\002\uffb8\003\uffb8\007\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\040\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\050\uffb8\051\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\070\uffb8\102\uffb8\103\uffb8\001\002\000" +
    "\060\002\uffe1\003\uffe1\007\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\040\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\050\uffe1\051\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\070\uffe1\102\uffe1\103\uffe1\001\002\000\060\002" +
    "\uffea\003\uffea\007\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\040\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\050\uffea\051\uffea\055\uffea\056\uffea\057\uffea" +
    "\070\uffea\102\uffea\103\uffea\001\002\000\040\012\126\022" +
    "\123\023\116\024\115\025\121\027\127\030\117\031\124" +
    "\032\131\033\120\034\130\035\113\036\114\063\315\065" +
    "\122\001\002\000\060\002\uffb6\003\uffb6\007\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\040" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050\uffb6\051\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\070\uffb6\102\uffb6\103\uffb6\001" +
    "\002\000\060\002\uffb7\003\uffb7\007\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\040\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\050\uffb7\051\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\070\uffb7\102\uffb7\103\uffb7\001\002\000" +
    "\030\004\072\005\111\006\073\007\077\010\076\023\070" +
    "\037\075\052\101\060\103\075\102\076\104\001\002\000" +
    "\006\072\331\073\176\001\002\000\004\022\327\001\002" +
    "\000\030\004\072\005\111\006\073\007\077\010\076\023" +
    "\070\037\075\052\101\060\103\075\102\076\104\001\002" +
    "\000\004\023\323\001\002\000\004\063\324\001\002\000" +
    "\104\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\070\uffe2\075\uffe2\076\uffe2\102\uffe2" +
    "\103\uffe2\001\002\000\040\012\126\022\123\023\116\024" +
    "\115\025\121\027\127\030\117\031\124\032\131\033\120" +
    "\034\130\035\113\036\114\063\326\065\122\001\002\000" +
    "\104\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\050\uffe4\051\uffe4\052\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\070\uffe4\075\uffe4\076\uffe4\102\uffe4" +
    "\103\uffe4\001\002\000\004\063\330\001\002\000\104\002" +
    "\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\023\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\050\uffe3\051\uffe3\052\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\070\uffe3\075\uffe3\076\uffe3\102\uffe3\103\uffe3" +
    "\001\002\000\004\010\332\001\002\000\030\004\072\005" +
    "\111\006\073\007\077\010\076\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\040\011\334\012" +
    "\126\022\123\023\116\024\115\025\121\027\127\030\117" +
    "\031\124\032\131\033\120\034\130\035\113\036\114\065" +
    "\122\001\002\000\004\063\335\001\002\000\060\002\uffc5" +
    "\003\uffc5\007\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\050\uffc5\051\uffc5\055\uffc5\056\uffc5\057\uffc5\070" +
    "\uffc5\102\uffc5\103\uffc5\001\002\000\040\012\126\022\123" +
    "\023\116\024\115\025\121\027\127\030\117\031\124\032" +
    "\131\033\120\034\130\035\113\036\114\062\337\065\122" +
    "\001\002\000\006\061\340\064\341\001\002\000\030\004" +
    "\072\005\111\006\073\007\077\010\076\023\070\037\075" +
    "\052\101\060\103\075\102\076\104\001\002\000\030\004" +
    "\072\005\111\006\073\007\077\010\076\023\070\037\075" +
    "\052\101\060\103\075\102\076\104\001\002\000\040\012" +
    "\126\022\123\023\116\024\115\025\121\027\127\030\117" +
    "\031\124\032\131\033\120\034\130\035\113\036\114\063" +
    "\343\065\122\001\002\000\060\002\uffc8\003\uffc8\007\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\050\uffc8" +
    "\051\uffc8\055\uffc8\056\uffc8\057\uffc8\070\uffc8\102\uffc8\103" +
    "\uffc8\001\002\000\040\012\126\022\123\023\116\024\115" +
    "\025\121\027\127\030\117\031\124\032\131\033\120\034" +
    "\130\035\113\036\114\062\345\065\122\001\002\000\004" +
    "\064\346\001\002\000\030\004\072\005\111\006\073\007" +
    "\077\010\076\023\070\037\075\052\101\060\103\075\102" +
    "\076\104\001\002\000\040\012\126\022\123\023\116\024" +
    "\115\025\121\027\127\030\117\031\124\032\131\033\120" +
    "\034\130\035\113\036\114\063\350\065\122\001\002\000" +
    "\060\002\uffc7\003\uffc7\007\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\050\uffc7\051\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\070\uffc7\102\uffc7\103\uffc7\001\002\000\030\004" +
    "\072\005\111\006\073\007\077\010\076\023\070\037\075" +
    "\052\101\060\103\075\102\076\104\001\002\000\040\011" +
    "\353\012\126\022\123\023\116\024\115\025\121\027\127" +
    "\030\117\031\124\032\131\033\120\034\130\035\113\036" +
    "\114\065\122\001\002\000\004\047\354\001\002\000\054" +
    "\003\035\007\032\013\015\014\012\015\025\016\010\017" +
    "\055\020\057\021\007\040\030\042\050\043\061\044\020" +
    "\045\022\051\017\055\036\056\014\057\034\070\051\102" +
    "\040\103\047\001\002\000\056\003\035\007\032\013\015" +
    "\014\012\015\025\016\010\017\055\020\057\021\007\040" +
    "\030\042\050\043\061\044\020\045\022\050\356\051\017" +
    "\055\036\056\014\057\034\070\051\102\040\103\047\001" +
    "\002\000\062\002\uffdf\003\uffdf\007\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\040\uffdf\041" +
    "\357\042\uffdf\043\uffdf\044\uffdf\045\uffdf\050\uffdf\051\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\070\uffdf\102\uffdf\103\uffdf\001" +
    "\002\000\006\040\030\047\360\001\002\000\054\003\035" +
    "\007\032\013\015\014\012\015\025\016\010\017\055\020" +
    "\057\021\007\040\030\042\050\043\061\044\020\045\022" +
    "\051\017\055\036\056\014\057\034\070\051\102\040\103" +
    "\047\001\002\000\060\002\uffde\003\uffde\007\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\040" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\050\uffde\051\uffde" +
    "\055\uffde\056\uffde\057\uffde\070\uffde\102\uffde\103\uffde\001" +
    "\002\000\056\003\035\007\032\013\015\014\012\015\025" +
    "\016\010\017\055\020\057\021\007\040\030\042\050\043" +
    "\061\044\020\045\022\050\363\051\017\055\036\056\014" +
    "\057\034\070\051\102\040\103\047\001\002\000\060\002" +
    "\uffdd\003\uffdd\007\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\040\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\050\uffdd\051\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\070\uffdd\102\uffdd\103\uffdd\001\002\000\030\004\072\005" +
    "\111\006\073\007\077\010\076\023\070\037\075\052\101" +
    "\060\103\075\102\076\104\001\002\000\040\011\366\012" +
    "\126\022\123\023\116\024\115\025\121\027\127\030\117" +
    "\031\124\032\131\033\120\034\130\035\113\036\114\065" +
    "\122\001\002\000\004\047\367\001\002\000\032\004\072" +
    "\005\111\006\073\007\077\010\076\023\070\037\075\046" +
    "\372\052\101\060\103\075\102\076\104\001\002\000\034" +
    "\004\072\005\111\006\073\007\077\010\076\023\070\037" +
    "\075\046\372\050\u0104\052\101\060\103\075\102\076\104" +
    "\001\002\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\023\uffdb\037\uffdb\046\uffdb\050\uffdb\052\uffdb\060\uffdb" +
    "\075\uffdb\076\uffdb\001\002\000\004\047\u0101\001\002\000" +
    "\040\012\126\022\123\023\116\024\115\025\121\027\127" +
    "\030\117\031\124\032\131\033\120\034\130\035\113\036" +
    "\114\064\374\065\122\001\002\000\004\031\375\001\002" +
    "\000\004\047\376\001\002\000\054\003\035\007\032\013" +
    "\015\014\012\015\025\016\010\017\055\020\057\021\007" +
    "\040\030\042\050\043\061\044\020\045\022\051\017\055" +
    "\036\056\014\057\034\070\051\102\040\103\047\001\002" +
    "\000\056\003\035\007\032\013\015\014\012\015\025\016" +
    "\010\017\055\020\057\021\007\040\030\042\050\043\061" +
    "\044\020\045\022\050\u0100\051\017\055\036\056\014\057" +
    "\034\070\051\102\040\103\047\001\002\000\034\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\023\uffda\037\uffda\046" +
    "\uffda\050\uffda\052\uffda\060\uffda\075\uffda\076\uffda\001\002" +
    "\000\054\003\035\007\032\013\015\014\012\015\025\016" +
    "\010\017\055\020\057\021\007\040\030\042\050\043\061" +
    "\044\020\045\022\051\017\055\036\056\014\057\034\070" +
    "\051\102\040\103\047\001\002\000\056\003\035\007\032" +
    "\013\015\014\012\015\025\016\010\017\055\020\057\021" +
    "\007\040\030\042\050\043\061\044\020\045\022\050\u0103" +
    "\051\017\055\036\056\014\057\034\070\051\102\040\103" +
    "\047\001\002\000\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\023\uffd9\037\uffd9\046\uffd9\050\uffd9\052\uffd9\060" +
    "\uffd9\075\uffd9\076\uffd9\001\002\000\060\002\uffd8\003\uffd8" +
    "\007\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\050\uffd8\051\uffd8\055\uffd8\056\uffd8\057\uffd8\070\uffd8\102" +
    "\uffd8\103\uffd8\001\002\000\034\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\023\uffdc\037\uffdc\046\uffdc\050\uffdc\052" +
    "\uffdc\060\uffdc\075\uffdc\076\uffdc\001\002\000\010\007\u0109" +
    "\020\u0108\021\u0107\001\002\000\004\007\u0124\001\002\000" +
    "\004\007\u0121\001\002\000\010\022\320\023\322\064\321" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\040\012\126\022\123\023\116\024\115\025" +
    "\121\027\127\030\117\031\124\032\131\033\120\034\130" +
    "\035\113\036\114\063\u010d\065\122\001\002\000\004\007" +
    "\u010e\001\002\000\010\022\u0114\023\u0116\064\u0115\001\002" +
    "\000\004\011\u0110\001\002\000\004\047\u0111\001\002\000" +
    "\054\003\035\007\032\013\015\014\012\015\025\016\010" +
    "\017\055\020\057\021\007\040\030\042\050\043\061\044" +
    "\020\045\022\051\017\055\036\056\014\057\034\070\051" +
    "\102\040\103\047\001\002\000\056\003\035\007\032\013" +
    "\015\014\012\015\025\016\010\017\055\020\057\021\007" +
    "\040\030\042\050\043\061\044\020\045\022\050\u0113\051" +
    "\017\055\036\056\014\057\034\070\051\102\040\103\047" +
    "\001\002\000\060\002\uffd4\003\uffd4\007\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\040\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\050\uffd4\051\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\070\uffd4\102\uffd4\103\uffd4\001\002" +
    "\000\004\022\u0119\001\002\000\030\004\072\005\111\006" +
    "\073\007\077\010\076\023\070\037\075\052\101\060\103" +
    "\075\102\076\104\001\002\000\004\023\u0117\001\002\000" +
    "\004\011\uffd1\001\002\000\040\011\uffd3\012\126\022\123" +
    "\023\116\024\115\025\121\027\127\030\117\031\124\032" +
    "\131\033\120\034\130\035\113\036\114\065\122\001\002" +
    "\000\004\011\uffd2\001\002\000\040\012\126\022\123\023" +
    "\116\024\115\025\121\027\127\030\117\031\124\032\131" +
    "\033\120\034\130\035\113\036\114\063\u011b\065\122\001" +
    "\002\000\004\007\u010e\001\002\000\004\011\u011d\001\002" +
    "\000\004\047\u011e\001\002\000\054\003\035\007\032\013" +
    "\015\014\012\015\025\016\010\017\055\020\057\021\007" +
    "\040\030\042\050\043\061\044\020\045\022\051\017\055" +
    "\036\056\014\057\034\070\051\102\040\103\047\001\002" +
    "\000\056\003\035\007\032\013\015\014\012\015\025\016" +
    "\010\017\055\020\057\021\007\040\030\042\050\043\061" +
    "\044\020\045\022\050\u0120\051\017\055\036\056\014\057" +
    "\034\070\051\102\040\103\047\001\002\000\060\002\uffd5" +
    "\003\uffd5\007\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\050\uffd5\051\uffd5\055\uffd5\056\uffd5\057\uffd5\070" +
    "\uffd5\102\uffd5\103\uffd5\001\002\000\004\054\u0122\001\002" +
    "\000\016\013\015\014\012\015\025\016\010\017\055\102" +
    "\040\001\002\000\006\063\225\064\224\001\002\000\004" +
    "\054\u0125\001\002\000\016\013\015\014\012\015\025\016" +
    "\010\017\055\102\040\001\002\000\006\063\u0128\064\u0127" +
    "\001\002\000\030\004\072\005\111\006\073\007\077\010" +
    "\076\023\070\037\075\052\101\060\103\075\102\076\104" +
    "\001\002\000\104\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\070\uffe6\075\uffe6\076" +
    "\uffe6\102\uffe6\103\uffe6\001\002\000\040\012\126\022\123" +
    "\023\116\024\115\025\121\027\127\030\117\031\124\032" +
    "\131\033\120\034\130\035\113\036\114\063\u012a\065\122" +
    "\001\002\000\104\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\023\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\070\uffe8\075\uffe8\076" +
    "\uffe8\102\uffe8\103\uffe8\001\002\000\030\004\072\005\111" +
    "\006\073\007\077\010\076\023\070\037\075\052\101\060" +
    "\103\075\102\076\104\001\002\000\040\011\u012d\012\126" +
    "\022\123\023\116\024\115\025\121\027\127\030\117\031" +
    "\124\032\131\033\120\034\130\035\113\036\114\065\122" +
    "\001\002\000\004\063\u012e\001\002\000\060\002\uffe9\003" +
    "\uffe9\007\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\050\uffe9\051\uffe9\055\uffe9\056\uffe9\057\uffe9\070\uffe9" +
    "\102\uffe9\103\uffe9\001\002\000\060\002\uffe0\003\uffe0\007" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\050" +
    "\uffe0\051\uffe0\055\uffe0\056\uffe0\057\uffe0\070\uffe0\102\uffe0" +
    "\103\uffe0\001\002\000\004\054\u0131\001\002\000\016\013" +
    "\015\014\012\015\025\016\010\017\055\102\040\001\002" +
    "\000\010\061\u0133\063\u0128\064\u0127\001\002\000\004\062" +
    "\u0134\001\002\000\006\061\u0135\064\u0136\001\002\000\004" +
    "\062\u013b\001\002\000\004\061\u0137\001\002\000\030\004" +
    "\072\005\111\006\073\007\077\010\076\023\070\037\075" +
    "\052\101\060\103\075\102\076\104\001\002\000\006\053" +
    "\236\062\u0139\001\002\000\004\063\u013a\001\002\000\060" +
    "\002\uffcc\003\uffcc\007\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\040\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\050\uffcc\051\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\070\uffcc\102\uffcc\103\uffcc\001\002\000\004\064\u013c" +
    "\001\002\000\004\061\u013d\001\002\000\004\061\245\001" +
    "\002\000\006\053\247\062\u013f\001\002\000\004\063\u0140" +
    "\001\002\000\060\002\uffca\003\uffca\007\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\040\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\050\uffca\051\uffca\055" +
    "\uffca\056\uffca\057\uffca\070\uffca\102\uffca\103\uffca\001\002" +
    "\000\004\010\u0142\001\002\000\020\011\u0144\013\015\014" +
    "\012\015\025\016\010\017\055\102\040\001\002\000\006" +
    "\011\u014b\053\u014a\001\002\000\004\047\u0147\001\002\000" +
    "\004\007\u0146\001\002\000\006\011\uffbd\053\uffbd\001\002" +
    "\000\054\003\035\007\032\013\015\014\012\015\025\016" +
    "\010\017\055\020\057\021\007\040\030\042\050\043\061" +
    "\044\020\045\022\051\017\055\036\056\014\057\034\070" +
    "\051\102\040\103\047\001\002\000\056\003\035\007\032" +
    "\013\015\014\012\015\025\016\010\017\055\020\057\021" +
    "\007\040\030\042\050\043\061\044\020\045\022\050\u0149" +
    "\051\017\055\036\056\014\057\034\070\051\102\040\103" +
    "\047\001\002\000\060\002\uffc0\003\uffc0\007\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\050\uffc0\051\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\070\uffc0\102\uffc0\103\uffc0\001" +
    "\002\000\016\013\015\014\012\015\025\016\010\017\055" +
    "\102\040\001\002\000\004\047\u014c\001\002\000\054\003" +
    "\035\007\032\013\015\014\012\015\025\016\010\017\055" +
    "\020\057\021\007\040\030\042\050\043\061\044\020\045" +
    "\022\051\017\055\036\056\014\057\034\070\051\102\040" +
    "\103\047\001\002\000\056\003\035\007\032\013\015\014" +
    "\012\015\025\016\010\017\055\020\057\021\007\040\030" +
    "\042\050\043\061\044\020\045\022\050\u014e\051\017\055" +
    "\036\056\014\057\034\070\051\102\040\103\047\001\002" +
    "\000\060\002\uffbf\003\uffbf\007\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\040\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\050\uffbf\051\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\070\uffbf\102\uffbf\103\uffbf\001\002\000\004" +
    "\007\u0150\001\002\000\006\011\uffbe\053\uffbe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\064\002\055\003\020\005\015\006\052\007" +
    "\030\010\040\011\010\013\022\015\036\016\023\017\057" +
    "\023\044\024\042\031\003\032\041\033\053\034\025\035" +
    "\004\040\045\042\043\043\012\044\026\045\032\046\051" +
    "\047\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\063\006\052\007\030\010" +
    "\040\011\010\013\022\015\036\016\023\017\057\023\044" +
    "\024\042\031\003\032\041\033\053\034\025\035\004\040" +
    "\045\042\043\043\012\044\026\045\032\046\051\047\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\077\021\073\022\070\036\312" +
    "\037\107\040\106\041\105\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\062\005\015\006\052\007\030" +
    "\010\040\011\010\013\022\015\036\016\023\017\057\023" +
    "\044\024\042\031\003\032\041\033\053\034\025\035\004" +
    "\040\045\042\043\043\012\044\026\045\032\046\051\047" +
    "\005\001\001\000\060\005\063\006\052\007\030\010\040" +
    "\011\010\013\022\015\036\016\023\017\057\023\044\024" +
    "\042\031\003\032\041\033\053\034\025\035\004\040\045" +
    "\042\043\043\012\044\026\045\032\046\051\047\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\020\077\021\073\022\070\036\111\037\107\040" +
    "\106\041\105\042\104\001\001\000\022\020\077\021\073" +
    "\022\070\036\151\037\107\040\106\041\105\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\020\077\021\073\022\070\036" +
    "\216\037\107\040\106\041\105\042\104\001\001\000\024" +
    "\020\077\021\073\022\070\036\212\037\107\040\106\041" +
    "\105\042\104\047\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\077\021\073\022\070\036\154" +
    "\037\107\040\106\041\105\042\104\001\001\000\022\020" +
    "\077\021\073\022\070\036\153\037\107\040\106\041\105" +
    "\042\104\001\001\000\022\020\077\021\073\022\070\036" +
    "\152\037\107\040\106\041\105\042\104\001\001\000\022" +
    "\020\077\021\073\022\070\036\150\037\107\040\106\041" +
    "\105\042\104\001\001\000\022\020\077\021\073\022\070" +
    "\036\146\037\107\040\106\041\105\042\104\001\001\000" +
    "\022\020\077\021\073\022\070\036\145\037\107\040\106" +
    "\041\105\042\104\001\001\000\022\020\077\021\073\022" +
    "\070\036\144\037\107\040\106\041\105\042\104\001\001" +
    "\000\022\020\077\021\073\022\070\036\143\037\107\040" +
    "\106\041\105\042\104\001\001\000\022\020\077\021\073" +
    "\022\070\036\141\037\107\040\106\041\105\042\104\001" +
    "\001\000\022\020\077\021\073\022\070\036\140\037\107" +
    "\040\106\041\105\042\104\001\001\000\002\001\001\000" +
    "\022\020\077\021\073\022\070\036\135\037\107\040\106" +
    "\041\105\042\104\001\001\000\022\020\077\021\073\022" +
    "\070\036\133\037\107\040\106\041\105\042\104\001\001" +
    "\000\022\020\077\021\073\022\070\036\132\037\107\040" +
    "\106\041\105\042\104\001\001\000\022\020\077\021\073" +
    "\022\070\036\131\037\107\040\106\041\105\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\020\077\021\073\022\070\036\136\037\107\040" +
    "\106\041\105\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\077\021" +
    "\073\022\070\036\151\037\107\040\106\041\105\042\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\020\077" +
    "\021\073\022\070\036\156\037\107\040\106\041\105\042" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\020\077\021\073\022\070\036\161\037\107\040\106\041" +
    "\105\042\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\020\077\021\073\022\070\036\204\037\107\040" +
    "\106\041\105\042\104\001\001\000\002\001\001\000\024" +
    "\020\077\021\073\022\070\030\167\036\170\037\107\040" +
    "\106\041\105\042\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\077\021\073\022" +
    "\070\036\173\037\107\040\106\041\105\042\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\077\021\073\022\070\036\177" +
    "\037\107\040\106\041\105\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\077\021\073\022\070" +
    "\036\202\037\107\040\106\041\105\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\077\021\073\022\070\036\207\037" +
    "\107\040\106\041\105\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\077\021\073\022\070\036\215" +
    "\037\107\040\106\041\105\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\020" +
    "\077\021\073\022\070\036\225\037\107\040\106\041\105" +
    "\042\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\020\077\021\073\022\070\025\233\036" +
    "\234\037\107\040\106\041\105\042\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\077\021\073\022" +
    "\070\036\240\037\107\040\106\041\105\042\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\245\001\001" +
    "\000\024\020\077\021\073\022\070\025\254\036\234\037" +
    "\107\040\106\041\105\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\020\077\021\073\022\070\025\252\036\234\037\107" +
    "\040\106\041\105\042\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\077\021\073\022\070" +
    "\036\272\037\107\040\106\041\105\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\275\005\015" +
    "\006\052\007\030\010\040\011\010\013\022\015\036\016" +
    "\023\017\057\023\044\024\042\031\003\032\041\033\053" +
    "\034\025\035\004\040\045\042\043\043\012\044\026\045" +
    "\032\046\051\047\005\001\001\000\060\005\063\006\052" +
    "\007\030\010\040\011\010\013\022\015\036\016\023\017" +
    "\057\023\044\024\042\031\003\032\041\033\053\034\025" +
    "\035\004\040\045\042\043\043\012\044\026\045\032\046" +
    "\051\047\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\020\077\021\073\022\070\030\302\036\170\037" +
    "\107\040\106\041\105\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\077\021\073\022\070" +
    "\036\335\037\107\040\106\041\105\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\077\021\073" +
    "\022\070\036\324\037\107\040\106\041\105\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\077\021\073" +
    "\022\070\036\332\037\107\040\106\041\105\042\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\077\021" +
    "\073\022\070\036\343\037\107\040\106\041\105\042\104" +
    "\001\001\000\022\020\077\021\073\022\070\036\341\037" +
    "\107\040\106\041\105\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\077\021\073\022\070\036\346\037\107\040\106" +
    "\041\105\042\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\020\077\021\073\022\070\036\351\037\107" +
    "\040\106\041\105\042\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\354\005\015\006\052\007\030" +
    "\010\040\011\010\013\022\015\036\016\023\017\057\023" +
    "\044\024\042\031\003\032\041\033\053\034\025\035\004" +
    "\040\045\042\043\043\012\044\026\045\032\046\051\047" +
    "\005\001\001\000\060\005\063\006\052\007\030\010\040" +
    "\011\010\013\022\015\036\016\023\017\057\023\044\024" +
    "\042\031\003\032\041\033\053\034\025\035\004\040\045" +
    "\042\043\043\012\044\026\045\032\046\051\047\005\001" +
    "\001\000\002\001\001\000\004\006\360\001\001\000\062" +
    "\003\361\005\015\006\052\007\030\010\040\011\010\013" +
    "\022\015\036\016\023\017\057\023\044\024\042\031\003" +
    "\032\041\033\053\034\025\035\004\040\045\042\043\043" +
    "\012\044\026\045\032\046\051\047\005\001\001\000\002" +
    "\001\001\000\060\005\063\006\052\007\030\010\040\011" +
    "\010\013\022\015\036\016\023\017\057\023\044\024\042" +
    "\031\003\032\041\033\053\034\025\035\004\040\045\042" +
    "\043\043\012\044\026\045\032\046\051\047\005\001\001" +
    "\000\002\001\001\000\022\020\077\021\073\022\070\036" +
    "\364\037\107\040\106\041\105\042\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\367\012\370\020" +
    "\077\021\073\022\070\036\372\037\107\040\106\041\105" +
    "\042\104\001\001\000\024\012\u0104\020\077\021\073\022" +
    "\070\036\372\037\107\040\106\041\105\042\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\376\005\015" +
    "\006\052\007\030\010\040\011\010\013\022\015\036\016" +
    "\023\017\057\023\044\024\042\031\003\032\041\033\053" +
    "\034\025\035\004\040\045\042\043\043\012\044\026\045" +
    "\032\046\051\047\005\001\001\000\060\005\063\006\052" +
    "\007\030\010\040\011\010\013\022\015\036\016\023\017" +
    "\057\023\044\024\042\031\003\032\041\033\053\034\025" +
    "\035\004\040\045\042\043\043\012\044\026\045\032\046" +
    "\051\047\005\001\001\000\002\001\001\000\062\003\u0101" +
    "\005\015\006\052\007\030\010\040\011\010\013\022\015" +
    "\036\016\023\017\057\023\044\024\042\031\003\032\041" +
    "\033\053\034\025\035\004\040\045\042\043\043\012\044" +
    "\026\045\032\046\051\047\005\001\001\000\060\005\063" +
    "\006\052\007\030\010\040\011\010\013\022\015\036\016" +
    "\023\017\057\023\044\024\042\031\003\032\041\033\053" +
    "\034\025\035\004\040\045\042\043\043\012\044\026\045" +
    "\032\046\051\047\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u0109\024\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\020\077\021\073\022\070\036\u0119\037\107\040" +
    "\106\041\105\042\104\001\001\000\022\020\077\021\073" +
    "\022\070\036\u010b\037\107\040\106\041\105\042\104\001" +
    "\001\000\002\001\001\000\004\014\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0111\005\015\006\052\007\030\010\040\011\010\013\022" +
    "\015\036\016\023\017\057\023\044\024\042\031\003\032" +
    "\041\033\053\034\025\035\004\040\045\042\043\043\012" +
    "\044\026\045\032\046\051\047\005\001\001\000\060\005" +
    "\063\006\052\007\030\010\040\011\010\013\022\015\036" +
    "\016\023\017\057\023\044\024\042\031\003\032\041\033" +
    "\053\034\025\035\004\040\045\042\043\043\012\044\026" +
    "\045\032\046\051\047\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\077\021\073\022\070\036\u0117" +
    "\037\107\040\106\041\105\042\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u011b\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u011e\005\015\006\052" +
    "\007\030\010\040\011\010\013\022\015\036\016\023\017" +
    "\057\023\044\024\042\031\003\032\041\033\053\034\025" +
    "\035\004\040\045\042\043\043\012\044\026\045\032\046" +
    "\051\047\005\001\001\000\060\005\063\006\052\007\030" +
    "\010\040\011\010\013\022\015\036\016\023\017\057\023" +
    "\044\024\042\031\003\032\041\033\053\034\025\035\004" +
    "\040\045\042\043\043\012\044\026\045\032\046\051\047" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u0125\001\001\000\002\001\001\000\022\020\077" +
    "\021\073\022\070\036\u0128\037\107\040\106\041\105\042" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\077\021\073\022\070\036\u012b\037" +
    "\107\040\106\041\105\042\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\077\021\073\022\070\025\u0137" +
    "\036\234\037\107\040\106\041\105\042\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u0142\047\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0147\005\015\006\052\007\030\010\040\011" +
    "\010\013\022\015\036\016\023\017\057\023\044\024\042" +
    "\031\003\032\041\033\053\034\025\035\004\040\045\042" +
    "\043\043\012\044\026\045\032\046\051\047\005\001\001" +
    "\000\060\005\063\006\052\007\030\010\040\011\010\013" +
    "\022\015\036\016\023\017\057\023\044\024\042\031\003" +
    "\032\041\033\053\034\025\035\004\040\045\042\043\043" +
    "\012\044\026\045\032\046\051\047\005\001\001\000\002" +
    "\001\001\000\004\047\u014e\001\001\000\002\001\001\000" +
    "\062\003\u014c\005\015\006\052\007\030\010\040\011\010" +
    "\013\022\015\036\016\023\017\057\023\044\024\042\031" +
    "\003\032\041\033\053\034\025\035\004\040\045\042\043" +
    "\043\012\044\026\045\032\046\051\047\005\001\001\000" +
    "\060\005\063\006\052\007\030\010\040\011\010\013\022" +
    "\015\036\016\023\017\057\023\044\024\042\031\003\032" +
    "\041\033\053\034\025\035\004\040\045\042\043\043\012" +
    "\044\026\045\032\046\051\047\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", No Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SCONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGN_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= AGREGAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ELIMINAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= MAIN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= error FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRINT ::= PRINTLN LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		     RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, b, c, a, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, b, c, a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= ID IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= ID MAS MAS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= ID MENOS MENOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SBREAK ::= BREAK FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SBREAK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SCONTINUAR ::= CONTINUE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCONTINUAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASOS ::= CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASO ::= EXPRESION IGUAL MAYOR LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Caso(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASO ::= DEFAULT LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DefaultCase(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SMATCH ::= MATCH LPAREN EXPRESION RPAREN LBRACE CASOS RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Match(a, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SMATCH",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWHILE ::= WHILE LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new While(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWHILE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SDO ::= DO LBRACE INSTRUCCIONES RBRACE WHILE LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SFOR ::= FOR LPAREN DECLARACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SFOR ::= FOR LPAREN ASIGNACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REFRESH_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // REFRESH_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REFRESH_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA ::= LISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MATRIZ ::= MATRIZ COMA LSQUARE LISTA RSQUARE 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList> a = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MATRIZ ::= LSQUARE LISTA RSQUARE 
            {
              LinkedList<LinkedList> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE LSQUARE RSQUARE IGUAL LSQUARE MATRIZ RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList> c = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecMatriz(TipoDeDato.MATRIZ, true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE LSQUARE RSQUARE IGUAL LSQUARE MATRIZ RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList> c = (LinkedList<LinkedList>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecMatriz(TipoDeDato.MATRIZ, false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGN_VECTOR ::= ID LSQUARE EXPRESION RSQUARE IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AsignacionValorEnPosicion(a, c, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VECTOR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGN_VECTOR ::= ID LSQUARE EXPRESION RSQUARE LSQUARE EXPRESION RSQUARE IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AsignValorMatriz(a, b, c, d, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VECTOR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEC_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST LPAREN RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		  RESULT = new DecColeccion(TipoDeDato.LIST, a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_LIST",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AGREGAR ::= ID PUNTO APPEND LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Append(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AGREGAR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELIMINAR ::= EXPR3 FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIMINAR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FROUND ::= ROUND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FRound(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FROUND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FLENGTH ::= LENGTH LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FLength(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FLENGTH",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FFIND ::= ID PUNTO FIND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FBuscar(a, b, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FFIND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO ::= TIPOS ID LPAREN RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Metodo(a, new LinkedList<HashMap>(), c, t, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODO ::= TIPOS ID LPAREN DECPARAMETROS RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Metodo(a, p, c, t, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECPARAMETROS ::= DECPARAMETROS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; var map2 = new HashMap<String, Object>();
                                                            map2.put("id", c); map2.put("tipo", b); RESULT.add(map2);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECPARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECPARAMETROS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var map = new HashMap<String, Object>();
                                                           map.put("id", b); map.put("tipo", a); RESULT.add(map);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECPARAMETROS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MAIN ::= START_WITH ID LPAREN CALLPARAMS RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new MetodoStart(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MAIN ::= START_WITH ID LPAREN RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		  RESULT = new MetodoStart(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CALLPARAMS ::= CALLPARAMS COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CALLPARAMS ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); RESULT.add(a);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LLAMADA ::= EXPR5 FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETORNO ::= RETURN EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Retorno(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNO ::= RETURN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Retorno(null, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.INT);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.DOUBLE);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.BOOLEAN);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.CHAR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.STRING);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.VOID);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION TIMES TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.INCREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.DECREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.IGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION NE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.DIFERENCIACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= LPAREN TIPOS RPAREN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Casteo(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, OpLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean((String) a), new Tipo(TipoDeDato.BOOLEAN), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPR3 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= FROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= FLENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= FFIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPR4 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPR5 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPR2 ::= ID LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorVector(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPR3 ::= ID PUNTO REMOVE LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Remove(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR3",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPR4 ::= ID LSQUARE EXPRESION RSQUARE LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorMatriz(a, c, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR4",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPR5 ::= ID LPAREN CALLPARAMS RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR5",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPR5 ::= ID LPAREN RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR5",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
