
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.backend.interprete.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import org.example.backend.interprete.abstracto.Instruccion;
import org.example.backend.interprete.expresion.*;
import org.example.backend.interprete.error.*;
import org.example.backend.interprete.simbol.*;
import org.example.backend.interprete.instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\017\007\000\002\023\011\000" +
    "\002\023\011\000\002\023\007\000\002\023\007\000\002" +
    "\024\006\000\002\024\006\000\002\024\006\000\002\007" +
    "\004\000\002\010\004\000\002\006\011\000\002\006\013" +
    "\000\002\006\015\000\002\004\004\000\002\004\003\000" +
    "\002\012\010\000\002\012\006\000\002\011\011\000\002" +
    "\015\011\000\002\016\013\000\002\013\014\000\002\013" +
    "\014\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\015\000" +
    "\002\026\015\000\002\027\011\000\002\030\015\000\002" +
    "\031\011\000\002\032\004\000\002\020\006\000\002\021" +
    "\006\000\002\022\010\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\033\004\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\006\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\006\000\002\033" +
    "\004\000\002\033\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\006\000\002\035\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\034\003\032\007\020\020\041\021\030\040" +
    "\016\042\007\043\021\044\036\045\040\051\024\055\025" +
    "\056\005\070\006\001\002\000\040\002\ufffe\003\ufffe\007" +
    "\ufffe\020\ufffe\021\ufffe\040\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\050\ufffe\051\ufffe\055\ufffe\056\ufffe\070\ufffe\001" +
    "\002\000\004\063\u0105\001\002\000\004\030\373\001\002" +
    "\000\004\010\365\001\002\000\040\002\ufff5\003\ufff5\007" +
    "\ufff5\020\ufff5\021\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\050\ufff5\051\ufff5\055\ufff5\056\ufff5\070\ufff5\001" +
    "\002\000\040\002\ufff6\003\ufff6\007\ufff6\020\ufff6\021\ufff6" +
    "\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\051" +
    "\ufff6\055\ufff6\056\ufff6\070\ufff6\001\002\000\040\002\uffef" +
    "\003\uffef\007\uffef\020\uffef\021\uffef\040\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\050\uffef\051\uffef\055\uffef\056\uffef" +
    "\070\uffef\001\002\000\040\002\ufffc\003\ufffc\007\ufffc\020" +
    "\ufffc\021\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\050\ufffc\051\ufffc\055\ufffc\056\ufffc\070\ufffc\001\002\000" +
    "\040\002\ufffa\003\ufffa\007\ufffa\020\ufffa\021\ufffa\040\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa\051\ufffa\055" +
    "\ufffa\056\ufffa\070\ufffa\001\002\000\036\002\000\003\032" +
    "\007\020\020\041\021\030\040\016\042\007\043\021\044" +
    "\036\045\040\051\024\055\025\056\005\070\006\001\002" +
    "\000\004\010\352\001\002\000\040\002\ufff4\003\ufff4\007" +
    "\ufff4\020\ufff4\021\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4\070\ufff4\001" +
    "\002\000\014\022\262\023\264\061\336\064\263\100\337" +
    "\001\002\000\004\047\326\001\002\000\040\002\ufff2\003" +
    "\ufff2\007\ufff2\020\ufff2\021\ufff2\040\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\050\ufff2\051\ufff2\055\ufff2\056\ufff2\070" +
    "\ufff2\001\002\000\040\002\ufffb\003\ufffb\007\ufffb\020\ufffb" +
    "\021\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\050" +
    "\ufffb\051\ufffb\055\ufffb\056\ufffb\070\ufffb\001\002\000\004" +
    "\010\322\001\002\000\004\063\321\001\002\000\040\002" +
    "\ufff9\003\ufff9\007\ufff9\020\ufff9\021\ufff9\040\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051\ufff9\055\ufff9\056" +
    "\ufff9\070\ufff9\001\002\000\040\002\ufffd\003\ufffd\007\ufffd" +
    "\020\ufffd\021\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\050\ufffd\051\ufffd\055\ufffd\056\ufffd\070\ufffd\001\002" +
    "\000\004\007\307\001\002\000\040\002\ufff3\003\ufff3\007" +
    "\ufff3\020\ufff3\021\ufff3\040\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\050\ufff3\051\ufff3\055\ufff3\056\ufff3\070\ufff3\001" +
    "\002\000\004\063\306\001\002\000\004\063\305\001\002" +
    "\000\040\002\ufff1\003\ufff1\007\ufff1\020\ufff1\021\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1" +
    "\055\ufff1\056\ufff1\070\ufff1\001\002\000\040\002\ufff8\003" +
    "\ufff8\007\ufff8\020\ufff8\021\ufff8\040\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\050\ufff8\051\ufff8\055\ufff8\056\ufff8\070" +
    "\ufff8\001\002\000\004\010\227\001\002\000\040\002\ufff0" +
    "\003\ufff0\007\ufff0\020\ufff0\021\ufff0\040\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\050\ufff0\051\ufff0\055\ufff0\056\ufff0" +
    "\070\ufff0\001\002\000\004\010\204\001\002\000\004\007" +
    "\045\001\002\000\040\002\ufff7\003\ufff7\007\ufff7\020\ufff7" +
    "\021\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\050" +
    "\ufff7\051\ufff7\055\ufff7\056\ufff7\070\ufff7\001\002\000\004" +
    "\002\044\001\002\000\004\002\001\001\002\000\004\054" +
    "\046\001\002\000\014\013\054\014\047\015\052\016\053" +
    "\017\050\001\002\000\014\011\uffc8\031\uffc8\061\uffc8\063" +
    "\uffc8\064\uffc8\001\002\000\014\011\uffc5\031\uffc5\061\uffc5" +
    "\063\uffc5\064\uffc5\001\002\000\010\061\055\063\057\064" +
    "\056\001\002\000\014\011\uffc7\031\uffc7\061\uffc7\063\uffc7" +
    "\064\uffc7\001\002\000\014\011\uffc6\031\uffc6\061\uffc6\063" +
    "\uffc6\064\uffc6\001\002\000\014\011\uffc9\031\uffc9\061\uffc9" +
    "\063\uffc9\064\uffc9\001\002\000\004\062\173\001\002\000" +
    "\030\004\060\005\064\006\061\007\070\010\075\023\063" +
    "\037\073\052\100\060\065\075\067\076\062\001\002\000" +
    "\064\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\020\uffe9\021\uffe9\023\uffe9\037\uffe9\040\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\055\uffe9\056\uffe9\060\uffe9\070\uffe9\075\uffe9\076\uffe9\001" +
    "\002\000\050\011\uffac\012\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\053\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\001\002\000\050\011\uffae\012\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\053\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\001\002\000\004\010\170\001\002" +
    "\000\030\004\060\005\064\006\061\007\070\010\075\023" +
    "\063\037\073\052\100\060\065\075\067\076\062\001\002" +
    "\000\050\011\uffaf\012\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\053\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\001\002\000\050\011\uffab\012\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\053\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\001\002\000\050\011\uffa5\012\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\053\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002\000\004\010\165" +
    "\001\002\000\054\011\uffaa\012\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\053\uffaa\061\151\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\100\152\001\002\000\050\011\uffa8" +
    "\012\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\053\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001\002\000" +
    "\050\011\uffa9\012\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\053\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\001\002\000\030\004\060\005\064\006\061\007\070\010" +
    "\075\023\063\037\073\052\100\060\065\075\067\076\062" +
    "\001\002\000\050\011\uffa6\012\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\053\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\001\002\000\042\004\060\005\064\006\061" +
    "\007\070\010\075\013\054\014\047\015\052\016\053\017" +
    "\050\023\063\037\073\052\100\060\065\075\067\076\062" +
    "\001\002\000\040\012\114\022\112\023\104\024\103\025" +
    "\106\027\115\030\105\031\113\032\116\033\107\034\117" +
    "\035\101\036\102\063\110\065\111\001\002\000\050\011" +
    "\uffa7\012\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\053\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\001\002" +
    "\000\050\011\uffad\012\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\053\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\135\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\064\002\uffeb\003\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\020\uffeb\021\uffeb\023\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\055\uffeb\056\uffeb\060\uffeb\070\uffeb\075" +
    "\uffeb\076\uffeb\001\002\000\030\004\060\005\064\006\061" +
    "\007\070\010\075\023\063\037\073\052\100\060\065\075" +
    "\067\076\062\001\002\000\032\004\060\005\064\006\061" +
    "\007\070\010\075\022\130\023\063\037\073\052\100\060" +
    "\065\075\067\076\062\001\002\000\030\004\060\005\064" +
    "\006\061\007\070\010\075\023\063\037\073\052\100\060" +
    "\065\075\067\076\062\001\002\000\032\004\060\005\064" +
    "\006\061\007\070\010\075\012\123\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\050\011\uffb5" +
    "\012\114\022\112\023\104\024\103\025\106\027\115\030" +
    "\105\031\113\032\116\033\107\034\uffb5\035\uffb5\036\uffb5" +
    "\053\uffb5\062\uffb5\063\uffb5\064\uffb5\065\111\001\002\000" +
    "\050\011\uffb7\012\114\022\112\023\104\024\103\025\106" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\053\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\001\002\000\050\011\uffba\012\114\022\112\023\104\024" +
    "\103\025\106\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\053\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\001\002\000\030\004\060\005\064\006\061" +
    "\007\070\010\075\023\063\037\073\052\100\060\065\075" +
    "\067\076\062\001\002\000\050\011\uffc1\012\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\001\002\000\050\011\uffc0\012" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\053" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\050" +
    "\011\uffb8\012\114\022\112\023\104\024\103\025\106\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\053\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\001" +
    "\002\000\050\011\uffc3\012\114\022\uffc3\023\uffc3\024\103" +
    "\025\106\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\053\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\001\002\000\050\011\uffbd\012\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\053\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\001\002\000\050\011\uffbb\012\114" +
    "\022\112\023\104\024\103\025\106\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\053\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\050\011" +
    "\uffb6\012\114\022\112\023\104\024\103\025\106\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\053\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002" +
    "\000\050\011\uffbf\012\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\053\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\001\002\000\050\011\uffb9\012\114\022\112\023\104" +
    "\024\103\025\106\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\053\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\001\002\000\074\004\060\005\064\006" +
    "\061\007\070\010\075\011\uffbc\012\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\073\052\100\053\uffbc" +
    "\060\065\062\uffbc\063\uffbc\064\uffbc\065\uffbc\075\067\076" +
    "\062\001\002\000\050\011\uffc2\012\114\022\uffc2\023\uffc2" +
    "\024\103\025\106\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\053\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\050\011\uffc4\012\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\053\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000\050\011\uffbe" +
    "\012\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\053\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000" +
    "\050\011\uffb3\012\114\022\112\023\104\024\103\025\106" +
    "\027\115\030\105\031\113\032\116\033\107\034\uffb3\035" +
    "\uffb3\036\uffb3\053\uffb3\062\uffb3\063\uffb3\064\uffb3\065\111" +
    "\001\002\000\050\011\uffb4\012\114\022\112\023\104\024" +
    "\103\025\106\027\115\030\105\031\113\032\116\033\107" +
    "\034\uffb4\035\uffb4\036\uffb4\053\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\111\001\002\000\004\011\146\001\002\000\040" +
    "\011\145\012\114\022\112\023\104\024\103\025\106\027" +
    "\115\030\105\031\113\032\116\033\107\034\117\035\101" +
    "\036\102\065\111\001\002\000\050\011\uffb0\012\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\053\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\050\011\uffb2" +
    "\012\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\053\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002\000" +
    "\050\011\uffb1\012\114\022\112\023\104\024\103\025\106" +
    "\027\115\030\105\031\113\032\116\033\107\034\uffb1\035" +
    "\uffb1\036\uffb1\053\uffb1\062\uffb1\063\uffb1\064\uffb1\065\111" +
    "\001\002\000\030\004\060\005\064\006\061\007\070\010" +
    "\075\023\063\037\073\052\100\060\065\075\067\076\062" +
    "\001\002\000\006\073\154\101\153\001\002\000\004\010" +
    "\160\001\002\000\004\010\155\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\040\011\157" +
    "\012\114\022\112\023\104\024\103\025\106\027\115\030" +
    "\105\031\113\032\116\033\107\034\117\035\101\036\102" +
    "\065\111\001\002\000\050\011\uffa3\012\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\053\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\001\002\000\030\004\060\005\064" +
    "\006\061\007\070\010\075\023\063\037\073\052\100\060" +
    "\065\075\067\076\062\001\002\000\040\011\162\012\114" +
    "\022\112\023\104\024\103\025\106\027\115\030\105\031" +
    "\113\032\116\033\107\034\117\035\101\036\102\065\111" +
    "\001\002\000\050\011\uffca\012\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\053\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\001\002\000\040\012\114\022\112\023\104" +
    "\024\103\025\106\027\115\030\105\031\113\032\116\033" +
    "\107\034\117\035\101\036\102\062\164\065\111\001\002" +
    "\000\050\011\uffa4\012\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\053\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\040\011\167\012\114\022\112\023\104" +
    "\024\103\025\106\027\115\030\105\031\113\032\116\033" +
    "\107\034\117\035\101\036\102\065\111\001\002\000\050" +
    "\011\uffcc\012\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\053\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\001" +
    "\002\000\030\004\060\005\064\006\061\007\070\010\075" +
    "\023\063\037\073\052\100\060\065\075\067\076\062\001" +
    "\002\000\040\011\172\012\114\022\112\023\104\024\103" +
    "\025\106\027\115\030\105\031\113\032\116\033\107\034" +
    "\117\035\101\036\102\065\111\001\002\000\050\011\uffcb" +
    "\012\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\053\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000" +
    "\004\064\174\001\002\000\004\061\175\001\002\000\030" +
    "\004\060\005\064\006\061\007\070\010\075\023\063\037" +
    "\073\052\100\060\065\075\067\076\062\001\002\000\006" +
    "\053\200\062\201\001\002\000\042\012\114\022\112\023" +
    "\104\024\103\025\106\027\115\030\105\031\113\032\116" +
    "\033\107\034\117\035\101\036\102\053\uffd3\062\uffd3\065" +
    "\111\001\002\000\030\004\060\005\064\006\061\007\070" +
    "\010\075\023\063\037\073\052\100\060\065\075\067\076" +
    "\062\001\002\000\004\063\202\001\002\000\040\002\uffd1" +
    "\003\uffd1\007\uffd1\020\uffd1\021\uffd1\040\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\050\uffd1\051\uffd1\055\uffd1\056\uffd1" +
    "\070\uffd1\001\002\000\042\012\114\022\112\023\104\024" +
    "\103\025\106\027\115\030\105\031\113\032\116\033\107" +
    "\034\117\035\101\036\102\053\uffd4\062\uffd4\065\111\001" +
    "\002\000\030\004\060\005\064\006\061\007\070\010\075" +
    "\023\063\037\073\052\100\060\065\075\067\076\062\001" +
    "\002\000\040\011\206\012\114\022\112\023\104\024\103" +
    "\025\106\027\115\030\105\031\113\032\116\033\107\034" +
    "\117\035\101\036\102\065\111\001\002\000\004\047\207" +
    "\001\002\000\032\004\060\005\064\006\061\007\070\010" +
    "\075\023\063\037\073\046\212\052\100\060\065\075\067" +
    "\076\062\001\002\000\034\004\060\005\064\006\061\007" +
    "\070\010\075\023\063\037\073\046\212\050\225\052\100" +
    "\060\065\075\067\076\062\001\002\000\034\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\023\uffdf\037\uffdf\046\uffdf" +
    "\050\uffdf\052\uffdf\060\uffdf\075\uffdf\076\uffdf\001\002\000" +
    "\004\047\222\001\002\000\040\012\114\022\112\023\104" +
    "\024\103\025\106\027\115\030\105\031\113\032\116\033" +
    "\107\034\117\035\101\036\102\064\214\065\111\001\002" +
    "\000\004\031\215\001\002\000\004\047\216\001\002\000" +
    "\034\003\032\007\020\020\041\021\030\040\016\042\007" +
    "\043\021\044\036\045\040\051\024\055\025\056\005\070" +
    "\006\001\002\000\036\003\032\007\020\020\041\021\030" +
    "\040\016\042\007\043\021\044\036\045\040\050\221\051" +
    "\024\055\025\056\005\070\006\001\002\000\040\002\uffff" +
    "\003\uffff\007\uffff\020\uffff\021\uffff\040\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\050\uffff\051\uffff\055\uffff\056\uffff" +
    "\070\uffff\001\002\000\034\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\023\uffde\037\uffde\046\uffde\050\uffde\052\uffde" +
    "\060\uffde\075\uffde\076\uffde\001\002\000\034\003\032\007" +
    "\020\020\041\021\030\040\016\042\007\043\021\044\036" +
    "\045\040\051\024\055\025\056\005\070\006\001\002\000" +
    "\036\003\032\007\020\020\041\021\030\040\016\042\007" +
    "\043\021\044\036\045\040\050\224\051\024\055\025\056" +
    "\005\070\006\001\002\000\034\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\023\uffdd\037\uffdd\046\uffdd\050\uffdd\052" +
    "\uffdd\060\uffdd\075\uffdd\076\uffdd\001\002\000\040\002\uffdc" +
    "\003\uffdc\007\uffdc\020\uffdc\021\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\050\uffdc\051\uffdc\055\uffdc\056\uffdc" +
    "\070\uffdc\001\002\000\034\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\023\uffe0\037\uffe0\046\uffe0\050\uffe0\052\uffe0" +
    "\060\uffe0\075\uffe0\076\uffe0\001\002\000\010\007\232\020" +
    "\231\021\230\001\002\000\004\007\276\001\002\000\004" +
    "\007\273\001\002\000\010\022\262\023\264\064\263\001" +
    "\002\000\030\004\060\005\064\006\061\007\070\010\075" +
    "\023\063\037\073\052\100\060\065\075\067\076\062\001" +
    "\002\000\030\004\060\005\064\006\061\007\070\010\075" +
    "\023\063\037\073\052\100\060\065\075\067\076\062\001" +
    "\002\000\040\012\114\022\112\023\104\024\103\025\106" +
    "\027\115\030\105\031\113\032\116\033\107\034\117\035" +
    "\101\036\102\063\236\065\111\001\002\000\004\007\237" +
    "\001\002\000\010\022\245\023\247\064\246\001\002\000" +
    "\004\011\241\001\002\000\004\047\242\001\002\000\034" +
    "\003\032\007\020\020\041\021\030\040\016\042\007\043" +
    "\021\044\036\045\040\051\024\055\025\056\005\070\006" +
    "\001\002\000\036\003\032\007\020\020\041\021\030\040" +
    "\016\042\007\043\021\044\036\045\040\050\244\051\024" +
    "\055\025\056\005\070\006\001\002\000\040\002\uffd8\003" +
    "\uffd8\007\uffd8\020\uffd8\021\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\050\uffd8\051\uffd8\055\uffd8\056\uffd8\070" +
    "\uffd8\001\002\000\004\022\252\001\002\000\030\004\060" +
    "\005\064\006\061\007\070\010\075\023\063\037\073\052" +
    "\100\060\065\075\067\076\062\001\002\000\004\023\250" +
    "\001\002\000\004\011\uffd5\001\002\000\040\011\uffd7\012" +
    "\114\022\112\023\104\024\103\025\106\027\115\030\105" +
    "\031\113\032\116\033\107\034\117\035\101\036\102\065" +
    "\111\001\002\000\004\011\uffd6\001\002\000\040\012\114" +
    "\022\112\023\104\024\103\025\106\027\115\030\105\031" +
    "\113\032\116\033\107\034\117\035\101\036\102\063\254" +
    "\065\111\001\002\000\004\007\237\001\002\000\004\011" +
    "\256\001\002\000\004\047\257\001\002\000\034\003\032" +
    "\007\020\020\041\021\030\040\016\042\007\043\021\044" +
    "\036\045\040\051\024\055\025\056\005\070\006\001\002" +
    "\000\036\003\032\007\020\020\041\021\030\040\016\042" +
    "\007\043\021\044\036\045\040\050\261\051\024\055\025" +
    "\056\005\070\006\001\002\000\040\002\uffd9\003\uffd9\007" +
    "\uffd9\020\uffd9\021\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\050\uffd9\051\uffd9\055\uffd9\056\uffd9\070\uffd9\001" +
    "\002\000\004\022\271\001\002\000\030\004\060\005\064" +
    "\006\061\007\070\010\075\023\063\037\073\052\100\060" +
    "\065\075\067\076\062\001\002\000\004\023\265\001\002" +
    "\000\004\063\266\001\002\000\064\002\uffe6\003\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\020\uffe6\021\uffe6" +
    "\023\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\056\uffe6\060\uffe6" +
    "\070\uffe6\075\uffe6\076\uffe6\001\002\000\040\012\114\022" +
    "\112\023\104\024\103\025\106\027\115\030\105\031\113" +
    "\032\116\033\107\034\117\035\101\036\102\063\270\065" +
    "\111\001\002\000\064\002\uffe8\003\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\020\uffe8\021\uffe8\023\uffe8\037" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\055\uffe8\056\uffe8\060\uffe8\070\uffe8\075" +
    "\uffe8\076\uffe8\001\002\000\004\063\272\001\002\000\064" +
    "\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\020\uffe7\021\uffe7\023\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\050\uffe7\051\uffe7\052\uffe7\055" +
    "\uffe7\056\uffe7\060\uffe7\070\uffe7\075\uffe7\076\uffe7\001\002" +
    "\000\004\054\274\001\002\000\014\013\054\014\047\015" +
    "\052\016\053\017\050\001\002\000\006\063\057\064\056" +
    "\001\002\000\004\054\277\001\002\000\014\013\054\014" +
    "\047\015\052\016\053\017\050\001\002\000\006\063\302" +
    "\064\301\001\002\000\030\004\060\005\064\006\061\007" +
    "\070\010\075\023\063\037\073\052\100\060\065\075\067" +
    "\076\062\001\002\000\064\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\020\uffea\021\uffea\023\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050" +
    "\uffea\051\uffea\052\uffea\055\uffea\056\uffea\060\uffea\070\uffea" +
    "\075\uffea\076\uffea\001\002\000\040\012\114\022\112\023" +
    "\104\024\103\025\106\027\115\030\105\031\113\032\116" +
    "\033\107\034\117\035\101\036\102\063\304\065\111\001" +
    "\002\000\064\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\020\uffec\021\uffec\023\uffec\037\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\050\uffec\051\uffec" +
    "\052\uffec\055\uffec\056\uffec\060\uffec\070\uffec\075\uffec\076" +
    "\uffec\001\002\000\040\002\uffcd\003\uffcd\007\uffcd\020\uffcd" +
    "\021\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\050" +
    "\uffcd\051\uffcd\055\uffcd\056\uffcd\070\uffcd\001\002\000\040" +
    "\002\uffee\003\uffee\007\uffee\020\uffee\021\uffee\040\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\050\uffee\051\uffee\055\uffee" +
    "\056\uffee\070\uffee\001\002\000\004\054\310\001\002\000" +
    "\014\013\054\014\047\015\052\016\053\017\050\001\002" +
    "\000\010\061\312\063\302\064\301\001\002\000\004\062" +
    "\313\001\002\000\004\064\314\001\002\000\004\061\315" +
    "\001\002\000\030\004\060\005\064\006\061\007\070\010" +
    "\075\023\063\037\073\052\100\060\065\075\067\076\062" +
    "\001\002\000\006\053\200\062\317\001\002\000\004\063" +
    "\320\001\002\000\040\002\uffd2\003\uffd2\007\uffd2\020\uffd2" +
    "\021\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\050" +
    "\uffd2\051\uffd2\055\uffd2\056\uffd2\070\uffd2\001\002\000\040" +
    "\002\uffe5\003\uffe5\007\uffe5\020\uffe5\021\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\055\uffe5" +
    "\056\uffe5\070\uffe5\001\002\000\030\004\060\005\064\006" +
    "\061\007\070\010\075\023\063\037\073\052\100\060\065" +
    "\075\067\076\062\001\002\000\040\011\324\012\114\022" +
    "\112\023\104\024\103\025\106\027\115\030\105\031\113" +
    "\032\116\033\107\034\117\035\101\036\102\065\111\001" +
    "\002\000\004\063\325\001\002\000\040\002\uffed\003\uffed" +
    "\007\uffed\020\uffed\021\uffed\040\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\050\uffed\051\uffed\055\uffed\056\uffed\070\uffed" +
    "\001\002\000\034\003\032\007\020\020\041\021\030\040" +
    "\016\042\007\043\021\044\036\045\040\051\024\055\025" +
    "\056\005\070\006\001\002\000\036\003\032\007\020\020" +
    "\041\021\030\040\016\042\007\043\021\044\036\045\040" +
    "\050\330\051\024\055\025\056\005\070\006\001\002\000" +
    "\004\042\331\001\002\000\004\010\332\001\002\000\030" +
    "\004\060\005\064\006\061\007\070\010\075\023\063\037" +
    "\073\052\100\060\065\075\067\076\062\001\002\000\040" +
    "\011\334\012\114\022\112\023\104\024\103\025\106\027" +
    "\115\030\105\031\113\032\116\033\107\034\117\035\101" +
    "\036\102\065\111\001\002\000\004\063\335\001\002\000" +
    "\040\002\uffda\003\uffda\007\uffda\020\uffda\021\uffda\040\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\050\uffda\051\uffda\055" +
    "\uffda\056\uffda\070\uffda\001\002\000\030\004\060\005\064" +
    "\006\061\007\070\010\075\023\063\037\073\052\100\060" +
    "\065\075\067\076\062\001\002\000\006\072\340\073\154" +
    "\001\002\000\004\010\341\001\002\000\030\004\060\005" +
    "\064\006\061\007\070\010\075\023\063\037\073\052\100" +
    "\060\065\075\067\076\062\001\002\000\040\011\343\012" +
    "\114\022\112\023\104\024\103\025\106\027\115\030\105" +
    "\031\113\032\116\033\107\034\117\035\101\036\102\065" +
    "\111\001\002\000\004\063\344\001\002\000\040\002\uffce" +
    "\003\uffce\007\uffce\020\uffce\021\uffce\040\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\050\uffce\051\uffce\055\uffce\056\uffce" +
    "\070\uffce\001\002\000\040\012\114\022\112\023\104\024" +
    "\103\025\106\027\115\030\105\031\113\032\116\033\107" +
    "\034\117\035\101\036\102\062\346\065\111\001\002\000" +
    "\004\064\347\001\002\000\030\004\060\005\064\006\061" +
    "\007\070\010\075\023\063\037\073\052\100\060\065\075" +
    "\067\076\062\001\002\000\040\012\114\022\112\023\104" +
    "\024\103\025\106\027\115\030\105\031\113\032\116\033" +
    "\107\034\117\035\101\036\102\063\351\065\111\001\002" +
    "\000\040\002\uffd0\003\uffd0\007\uffd0\020\uffd0\021\uffd0\040" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\050\uffd0\051\uffd0" +
    "\055\uffd0\056\uffd0\070\uffd0\001\002\000\030\004\060\005" +
    "\064\006\061\007\070\010\075\023\063\037\073\052\100" +
    "\060\065\075\067\076\062\001\002\000\040\011\354\012" +
    "\114\022\112\023\104\024\103\025\106\027\115\030\105" +
    "\031\113\032\116\033\107\034\117\035\101\036\102\065" +
    "\111\001\002\000\004\047\355\001\002\000\034\003\032" +
    "\007\020\020\041\021\030\040\016\042\007\043\021\044" +
    "\036\045\040\051\024\055\025\056\005\070\006\001\002" +
    "\000\036\003\032\007\020\020\041\021\030\040\016\042" +
    "\007\043\021\044\036\045\040\050\357\051\024\055\025" +
    "\056\005\070\006\001\002\000\042\002\uffe3\003\uffe3\007" +
    "\uffe3\020\uffe3\021\uffe3\040\uffe3\041\360\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\050\uffe3\051\uffe3\055\uffe3\056\uffe3\070" +
    "\uffe3\001\002\000\006\040\016\047\361\001\002\000\034" +
    "\003\032\007\020\020\041\021\030\040\016\042\007\043" +
    "\021\044\036\045\040\051\024\055\025\056\005\070\006" +
    "\001\002\000\040\002\uffe2\003\uffe2\007\uffe2\020\uffe2\021" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2" +
    "\051\uffe2\055\uffe2\056\uffe2\070\uffe2\001\002\000\036\003" +
    "\032\007\020\020\041\021\030\040\016\042\007\043\021" +
    "\044\036\045\040\050\364\051\024\055\025\056\005\070" +
    "\006\001\002\000\040\002\uffe1\003\uffe1\007\uffe1\020\uffe1" +
    "\021\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\050" +
    "\uffe1\051\uffe1\055\uffe1\056\uffe1\070\uffe1\001\002\000\030" +
    "\004\060\005\064\006\061\007\070\010\075\023\063\037" +
    "\073\052\100\060\065\075\067\076\062\001\002\000\040" +
    "\011\367\012\114\022\112\023\104\024\103\025\106\027" +
    "\115\030\105\031\113\032\116\033\107\034\117\035\101" +
    "\036\102\065\111\001\002\000\004\047\370\001\002\000" +
    "\034\003\032\007\020\020\041\021\030\040\016\042\007" +
    "\043\021\044\036\045\040\051\024\055\025\056\005\070" +
    "\006\001\002\000\036\003\032\007\020\020\041\021\030" +
    "\040\016\042\007\043\021\044\036\045\040\050\372\051" +
    "\024\055\025\056\005\070\006\001\002\000\040\002\uffdb" +
    "\003\uffdb\007\uffdb\020\uffdb\021\uffdb\040\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\050\uffdb\051\uffdb\055\uffdb\056\uffdb" +
    "\070\uffdb\001\002\000\014\013\054\014\047\015\052\016" +
    "\053\017\050\001\002\000\004\031\375\001\002\000\004" +
    "\007\376\001\002\000\004\064\377\001\002\000\004\071" +
    "\u0100\001\002\000\004\070\u0101\001\002\000\004\010\u0102" +
    "\001\002\000\004\011\u0103\001\002\000\004\063\u0104\001" +
    "\002\000\040\002\uffcf\003\uffcf\007\uffcf\020\uffcf\021\uffcf" +
    "\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\050\uffcf\051" +
    "\uffcf\055\uffcf\056\uffcf\070\uffcf\001\002\000\040\002\uffe4" +
    "\003\uffe4\007\uffe4\020\uffe4\021\uffe4\040\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\050\uffe4\051\uffe4\055\uffe4\056\uffe4" +
    "\070\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\050\002\042\003\014\005\003\006\013\007" +
    "\025\010\034\011\041\013\007\015\010\016\016\017\026" +
    "\023\012\024\022\026\030\027\021\030\033\031\036\032" +
    "\011\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\217\006\013\007\025\010\034\011" +
    "\041\013\007\015\010\016\016\017\026\023\012\024\022" +
    "\026\030\027\021\030\033\031\036\032\011\035\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\076\021\073\022\065\033\075\034\071" +
    "\035\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\076\021\073" +
    "\022\065\033\136\034\071\035\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\076\021\073\022\065\033\147\034\071\035\070" +
    "\001\001\000\002\001\001\000\020\020\076\021\073\022" +
    "\065\033\143\034\071\035\070\036\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\076\021\073\022\065\033\141\034\071\035\070\001\001" +
    "\000\016\020\076\021\073\022\065\033\140\034\071\035" +
    "\070\001\001\000\016\020\076\021\073\022\065\033\137" +
    "\034\071\035\070\001\001\000\016\020\076\021\073\022" +
    "\065\033\135\034\071\035\070\001\001\000\016\020\076" +
    "\021\073\022\065\033\133\034\071\035\070\001\001\000" +
    "\016\020\076\021\073\022\065\033\132\034\071\035\070" +
    "\001\001\000\016\020\076\021\073\022\065\033\131\034" +
    "\071\035\070\001\001\000\002\001\001\000\016\020\076" +
    "\021\073\022\065\033\130\034\071\035\070\001\001\000" +
    "\016\020\076\021\073\022\065\033\126\034\071\035\070" +
    "\001\001\000\016\020\076\021\073\022\065\033\125\034" +
    "\071\035\070\001\001\000\016\020\076\021\073\022\065" +
    "\033\123\034\071\035\070\001\001\000\016\020\076\021" +
    "\073\022\065\033\121\034\071\035\070\001\001\000\016" +
    "\020\076\021\073\022\065\033\120\034\071\035\070\001" +
    "\001\000\016\020\076\021\073\022\065\033\117\034\071" +
    "\035\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\076\021\073\022\065\033\124" +
    "\034\071\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\076\021\073\022\065\033\136" +
    "\034\071\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\076\021\073\022\065\033\146\034\071\035\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\076\021\073\022\065\033\162\034\071\035\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\076\021\073\022\065\033\155\034\071\035\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\076\021\073\022\065\033\160\034\071\035\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\076\021\073\022\065\033\165" +
    "\034\071\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\076\021\073\022\065\033\170\034\071" +
    "\035\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\076\021\073" +
    "\022\065\025\175\033\176\034\071\035\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\076\021\073" +
    "\022\065\033\202\034\071\035\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\076" +
    "\021\073\022\065\033\204\034\071\035\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\207\012\210" +
    "\020\076\021\073\022\065\033\212\034\071\035\070\001" +
    "\001\000\020\012\225\020\076\021\073\022\065\033\212" +
    "\034\071\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\216\005\003\006\013\007\025\010\034\011" +
    "\041\013\007\015\010\016\016\017\026\023\012\024\022" +
    "\026\030\027\021\030\033\031\036\032\011\035\032\001" +
    "\001\000\044\005\217\006\013\007\025\010\034\011\041" +
    "\013\007\015\010\016\016\017\026\023\012\024\022\026" +
    "\030\027\021\030\033\031\036\032\011\035\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\222\005" +
    "\003\006\013\007\025\010\034\011\041\013\007\015\010" +
    "\016\016\017\026\023\012\024\022\026\030\027\021\030" +
    "\033\031\036\032\011\035\032\001\001\000\044\005\217" +
    "\006\013\007\025\010\034\011\041\013\007\015\010\016" +
    "\016\017\026\023\012\024\022\026\030\027\021\030\033" +
    "\031\036\032\011\035\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\232\024\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\076\021\073\022\065\033\252\034\071" +
    "\035\070\001\001\000\016\020\076\021\073\022\065\033" +
    "\234\034\071\035\070\001\001\000\002\001\001\000\004" +
    "\014\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\242\005\003\006\013\007\025" +
    "\010\034\011\041\013\007\015\010\016\016\017\026\023" +
    "\012\024\022\026\030\027\021\030\033\031\036\032\011" +
    "\035\032\001\001\000\044\005\217\006\013\007\025\010" +
    "\034\011\041\013\007\015\010\016\016\017\026\023\012" +
    "\024\022\026\030\027\021\030\033\031\036\032\011\035" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\076\021\073\022\065\033\250\034\071\035\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\257" +
    "\005\003\006\013\007\025\010\034\011\041\013\007\015" +
    "\010\016\016\017\026\023\012\024\022\026\030\027\021" +
    "\030\033\031\036\032\011\035\032\001\001\000\044\005" +
    "\217\006\013\007\025\010\034\011\041\013\007\015\010" +
    "\016\016\017\026\023\012\024\022\026\030\027\021\030" +
    "\033\031\036\032\011\035\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\076\021\073\022\065\033" +
    "\266\034\071\035\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\277\001\001\000\002\001\001\000\016" +
    "\020\076\021\073\022\065\033\302\034\071\035\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\076\021" +
    "\073\022\065\025\315\033\176\034\071\035\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\076\021\073\022\065\033\322" +
    "\034\071\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\326\005\003\006\013" +
    "\007\025\010\034\011\041\013\007\015\010\016\016\017" +
    "\026\023\012\024\022\026\030\027\021\030\033\031\036" +
    "\032\011\035\032\001\001\000\044\005\217\006\013\007" +
    "\025\010\034\011\041\013\007\015\010\016\016\017\026" +
    "\023\012\024\022\026\030\027\021\030\033\031\036\032" +
    "\011\035\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\076\021\073\022\065\033\332\034\071\035" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\076\021\073\022\065\033\344\034" +
    "\071\035\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\076\021\073\022\065\033\341\034\071\035" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\076\021\073\022\065\033\347\034\071\035\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\076\021" +
    "\073\022\065\033\352\034\071\035\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\355\005\003\006" +
    "\013\007\025\010\034\011\041\013\007\015\010\016\016" +
    "\017\026\023\012\024\022\026\030\027\021\030\033\031" +
    "\036\032\011\035\032\001\001\000\044\005\217\006\013" +
    "\007\025\010\034\011\041\013\007\015\010\016\016\017" +
    "\026\023\012\024\022\026\030\027\021\030\033\031\036" +
    "\032\011\035\032\001\001\000\002\001\001\000\004\006" +
    "\361\001\001\000\046\003\362\005\003\006\013\007\025" +
    "\010\034\011\041\013\007\015\010\016\016\017\026\023" +
    "\012\024\022\026\030\027\021\030\033\031\036\032\011" +
    "\035\032\001\001\000\002\001\001\000\044\005\217\006" +
    "\013\007\025\010\034\011\041\013\007\015\010\016\016" +
    "\017\026\023\012\024\022\026\030\027\021\030\033\031" +
    "\036\032\011\035\032\001\001\000\002\001\001\000\016" +
    "\020\076\021\073\022\065\033\365\034\071\035\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\370" +
    "\005\003\006\013\007\025\010\034\011\041\013\007\015" +
    "\010\016\016\017\026\023\012\024\022\026\030\027\021" +
    "\030\033\031\036\032\011\035\032\001\001\000\044\005" +
    "\217\006\013\007\025\010\034\011\041\013\007\015\010" +
    "\016\016\017\026\023\012\024\022\026\030\027\021\030" +
    "\033\031\036\032\011\035\032\001\001\000\002\001\001" +
    "\000\004\036\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", No Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SCONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= ASIGN_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= AGREGAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ELIMINAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRINT ::= PRINTLN LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		     RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, b, c, a, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, b, c, a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= ID IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= ID MAS MAS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= ID MENOS MENOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SBREAK ::= BREAK FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SBREAK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SCONTINUAR ::= CONTINUE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCONTINUAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASOS ::= CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASO ::= EXPRESION IGUAL MAYOR LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Caso(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASO ::= DEFAULT LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DefaultCase(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SMATCH ::= MATCH LPAREN EXPRESION RPAREN LBRACE CASOS RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Match(a, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SMATCH",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWHILE ::= WHILE LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new While(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWHILE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SDO ::= DO LBRACE INSTRUCCIONES RBRACE WHILE LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SFOR ::= FOR LPAREN DECLARACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SFOR ::= FOR LPAREN ASIGNACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REFRESH_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REFRESH_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REFRESH_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA ::= LISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecColeccion(TipoDeDato.VECTOR, false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGN_VECTOR ::= ID LSQUARE EXPRESION RSQUARE IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AsignacionValorEnPosicion(a, c, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_VECTOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC_LIST ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST LPAREN RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		  RESULT = new DecColeccion(TipoDeDato.LIST, a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_LIST",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AGREGAR ::= ID PUNTO APPEND LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Append(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AGREGAR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELIMINAR ::= EXPR3 FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIMINAR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FROUND ::= ROUND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FRound(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FROUND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FLENGTH ::= LENGTH LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FLength(a, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FLENGTH",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FFIND ::= ID PUNTO FIND LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FBuscar(a, b, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FFIND",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.INT);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.DOUBLE);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.BOOLEAN);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.CHAR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.STRING);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION TIMES TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.INCREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.DECREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.IGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION NE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.DIFERENCIACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= LPAREN TIPOS RPAREN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Casteo(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, OpLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean((String) a), new Tipo(TipoDeDato.BOOLEAN), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPR3 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= FROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= FLENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= FFIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR2 ::= ID LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorVector(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR3 ::= ID PUNTO REMOVE LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Remove(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR3",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
