
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.backend.interprete.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import org.example.backend.interprete.abstracto.Instruccion;
import org.example.backend.interprete.expresion.*;
import org.example.backend.interprete.error.*;
import org.example.backend.interprete.simbol.*;
import org.example.backend.interprete.instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\017\007\000\002\020\011\000\002\020\011" +
    "\000\002\020\007\000\002\020\007\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\007\004\000\002" +
    "\010\004\000\002\006\011\000\002\006\013\000\002\006" +
    "\015\000\002\004\004\000\002\004\003\000\002\012\010" +
    "\000\002\012\006\000\002\011\011\000\002\015\011\000" +
    "\002\016\013\000\002\013\014\000\002\013\014\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\015\000\002\023\015" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\006\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\006\000\002\024\004\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\032\003\027\007\016\020\033\021\025\040" +
    "\014\042\006\043\017\044\031\045\032\051\021\055\022" +
    "\056\005\001\002\000\036\002\ufffe\003\ufffe\007\ufffe\020" +
    "\ufffe\021\ufffe\040\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\050\ufffe\051\ufffe\055\ufffe\056\ufffe\001\002\000\004\063" +
    "\322\001\002\000\004\010\314\001\002\000\036\002\ufff5" +
    "\003\ufff5\007\ufff5\020\ufff5\021\ufff5\040\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\050\ufff5\051\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\036\002\ufff6\003\ufff6\007\ufff6\020\ufff6\021" +
    "\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\001\002\000\036\002\ufffc\003" +
    "\ufffc\007\ufffc\020\ufffc\021\ufffc\040\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\050\ufffc\051\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\036\002\ufffa\003\ufffa\007\ufffa\020\ufffa\021\ufffa" +
    "\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa\051" +
    "\ufffa\055\ufffa\056\ufffa\001\002\000\034\002\000\003\027" +
    "\007\016\020\033\021\025\040\014\042\006\043\017\044" +
    "\031\045\032\051\021\055\022\056\005\001\002\000\004" +
    "\010\301\001\002\000\036\002\ufff4\003\ufff4\007\ufff4\020" +
    "\ufff4\021\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\050\ufff4\051\ufff4\055\ufff4\056\ufff4\001\002\000\010\022" +
    "\270\023\272\064\271\001\002\000\004\047\260\001\002" +
    "\000\036\002\ufffb\003\ufffb\007\ufffb\020\ufffb\021\ufffb\040" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\050\ufffb\051\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\004\010\254\001\002\000" +
    "\004\063\253\001\002\000\036\002\ufff9\003\ufff9\007\ufff9" +
    "\020\ufff9\021\ufff9\040\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\050\ufff9\051\ufff9\055\ufff9\056\ufff9\001\002\000\036" +
    "\002\ufffd\003\ufffd\007\ufffd\020\ufffd\021\ufffd\040\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd\051\ufffd\055\ufffd" +
    "\056\ufffd\001\002\000\004\007\241\001\002\000\036\002" +
    "\ufff3\003\ufff3\007\ufff3\020\ufff3\021\ufff3\040\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\050\ufff3\051\ufff3\055\ufff3\056" +
    "\ufff3\001\002\000\004\063\240\001\002\000\036\002\ufff8" +
    "\003\ufff8\007\ufff8\020\ufff8\021\ufff8\040\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8\055\ufff8\056\ufff8" +
    "\001\002\000\004\010\174\001\002\000\004\010\151\001" +
    "\002\000\004\007\037\001\002\000\036\002\ufff7\003\ufff7" +
    "\007\ufff7\020\ufff7\021\ufff7\040\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\050\ufff7\051\ufff7\055\ufff7\056\ufff7\001\002" +
    "\000\004\002\036\001\002\000\004\002\001\001\002\000" +
    "\004\054\040\001\002\000\014\013\046\014\041\015\044" +
    "\016\045\017\042\001\002\000\012\011\uffd3\061\uffd3\063" +
    "\uffd3\064\uffd3\001\002\000\012\011\uffd0\061\uffd0\063\uffd0" +
    "\064\uffd0\001\002\000\010\061\047\063\051\064\050\001" +
    "\002\000\012\011\uffd2\061\uffd2\063\uffd2\064\uffd2\001\002" +
    "\000\012\011\uffd1\061\uffd1\063\uffd1\064\uffd1\001\002\000" +
    "\012\011\uffd4\061\uffd4\063\uffd4\064\uffd4\001\002\000\004" +
    "\062\140\001\002\000\024\004\052\005\055\006\053\007" +
    "\057\010\062\023\054\037\061\052\064\060\056\001\002" +
    "\000\056\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\020\uffed\021\uffed\023\uffed\037\uffed\040\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\050\uffed\051\uffed\052" +
    "\uffed\055\uffed\056\uffed\060\uffed\001\002\000\050\011\uffb7" +
    "\012\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\053\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000" +
    "\050\011\uffb9\012\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\053\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\001\002\000\024\004\052\005\055\006\053\007\057\010" +
    "\062\023\054\037\061\052\064\060\056\001\002\000\050" +
    "\011\uffba\012\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\053\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001" +
    "\002\000\050\011\uffb6\012\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\053\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\052\011\uffb5\012\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\053\uffb5\061\135\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000\050\011\uffb4" +
    "\012\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\053\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000" +
    "\024\004\052\005\055\006\053\007\057\010\062\023\054" +
    "\037\061\052\064\060\056\001\002\000\036\004\052\005" +
    "\055\006\053\007\057\010\062\013\046\014\041\015\044" +
    "\016\045\017\042\023\054\037\061\052\064\060\056\001" +
    "\002\000\040\012\100\022\076\023\070\024\067\025\073" +
    "\027\101\030\071\031\077\032\102\033\072\034\103\035" +
    "\065\036\066\063\074\065\075\001\002\000\050\011\uffb8" +
    "\012\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\053\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002\000" +
    "\024\004\052\005\055\006\053\007\057\010\062\023\054" +
    "\037\061\052\064\060\056\001\002\000\024\004\052\005" +
    "\055\006\053\007\057\010\062\023\054\037\061\052\064" +
    "\060\056\001\002\000\024\004\052\005\055\006\053\007" +
    "\057\010\062\023\054\037\061\052\064\060\056\001\002" +
    "\000\024\004\052\005\055\006\053\007\057\010\062\023" +
    "\121\037\061\052\064\060\056\001\002\000\024\004\052" +
    "\005\055\006\053\007\057\010\062\023\054\037\061\052" +
    "\064\060\056\001\002\000\024\004\052\005\055\006\053" +
    "\007\057\010\062\023\054\037\061\052\064\060\056\001" +
    "\002\000\024\004\052\005\055\006\053\007\057\010\062" +
    "\023\054\037\061\052\064\060\056\001\002\000\056\002" +
    "\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\020\uffef\021\uffef\023\uffef\037\uffef\040\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\050\uffef\051\uffef\052\uffef\055\uffef" +
    "\056\uffef\060\uffef\001\002\000\024\004\052\005\055\006" +
    "\053\007\057\010\062\023\054\037\061\052\064\060\056" +
    "\001\002\000\026\004\052\005\055\006\053\007\057\010" +
    "\062\022\113\023\054\037\061\052\064\060\056\001\002" +
    "\000\024\004\052\005\055\006\053\007\057\010\062\023" +
    "\054\037\061\052\064\060\056\001\002\000\026\004\052" +
    "\005\055\006\053\007\057\010\062\012\107\023\054\037" +
    "\061\052\064\060\056\001\002\000\024\004\052\005\055" +
    "\006\053\007\057\010\062\023\054\037\061\052\064\060" +
    "\056\001\002\000\024\004\052\005\055\006\053\007\057" +
    "\010\062\023\054\037\061\052\064\060\056\001\002\000" +
    "\024\004\052\005\055\006\053\007\057\010\062\023\054" +
    "\037\061\052\064\060\056\001\002\000\050\011\uffc0\012" +
    "\100\022\076\023\070\024\067\025\073\027\101\030\071" +
    "\031\077\032\102\033\072\034\uffc0\035\uffc0\036\uffc0\053" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\075\001\002\000\050" +
    "\011\uffc2\012\100\022\076\023\070\024\067\025\073\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\053\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001" +
    "\002\000\050\011\uffc5\012\100\022\076\023\070\024\067" +
    "\025\073\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\053\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\001\002\000\024\004\052\005\055\006\053\007" +
    "\057\010\062\023\054\037\061\052\064\060\056\001\002" +
    "\000\050\011\uffcc\012\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\053\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\050\011\uffcb\012\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\053\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\001\002\000\050\011\uffc3\012\100\022" +
    "\076\023\070\024\067\025\073\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\053\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\050\011\uffc8" +
    "\012\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\053\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002\000" +
    "\050\011\uffce\012\100\022\uffce\023\uffce\024\067\025\073" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\053\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\001\002\000\050\011\uffc6\012\100\022\076\023\070\024" +
    "\067\025\073\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\053\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\001\002\000\050\011\uffca\012\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\053\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\001\002\000\050\011\uffc1\012" +
    "\100\022\076\023\070\024\067\025\073\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\053" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002\000\050" +
    "\011\uffc4\012\100\022\076\023\070\024\067\025\073\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\053\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001" +
    "\002\000\070\004\052\005\055\006\053\007\057\010\062" +
    "\011\uffc7\012\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\061\052\064\053\uffc7\060\056\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\001\002\000\050\011\uffcd\012\100" +
    "\022\uffcd\023\uffcd\024\067\025\073\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\053\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000\050\011" +
    "\uffcf\012\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\053\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\001\002" +
    "\000\050\011\uffc9\012\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\053\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\001\002\000\050\011\uffbe\012\100\022\076\023\070" +
    "\024\067\025\073\027\101\030\071\031\077\032\102\033" +
    "\072\034\uffbe\035\uffbe\036\uffbe\053\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\075\001\002\000\050\011\uffbf\012\100\022" +
    "\076\023\070\024\067\025\073\027\101\030\071\031\077" +
    "\032\102\033\072\034\uffbf\035\uffbf\036\uffbf\053\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\075\001\002\000\040\011\133" +
    "\012\100\022\076\023\070\024\067\025\073\027\101\030" +
    "\071\031\077\032\102\033\072\034\103\035\065\036\066" +
    "\065\075\001\002\000\004\011\131\001\002\000\024\004" +
    "\052\005\055\006\053\007\057\010\062\023\054\037\061" +
    "\052\064\060\056\001\002\000\050\011\uffbd\012\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\053\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\050\011\uffbb" +
    "\012\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\053\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000" +
    "\050\011\uffbc\012\100\022\076\023\070\024\067\025\073" +
    "\027\101\030\071\031\077\032\102\033\072\034\uffbc\035" +
    "\uffbc\036\uffbc\053\uffbc\062\uffbc\063\uffbc\064\uffbc\065\075" +
    "\001\002\000\024\004\052\005\055\006\053\007\057\010" +
    "\062\023\054\037\061\052\064\060\056\001\002\000\040" +
    "\012\100\022\076\023\070\024\067\025\073\027\101\030" +
    "\071\031\077\032\102\033\072\034\103\035\065\036\066" +
    "\062\137\065\075\001\002\000\050\011\uffb3\012\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\053\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\001\002\000\004\064\141" +
    "\001\002\000\004\061\142\001\002\000\024\004\052\005" +
    "\055\006\053\007\057\010\062\023\054\037\061\052\064" +
    "\060\056\001\002\000\006\053\145\062\146\001\002\000" +
    "\042\012\100\022\076\023\070\024\067\025\073\027\101" +
    "\030\071\031\077\032\102\033\072\034\103\035\065\036" +
    "\066\053\uffd7\062\uffd7\065\075\001\002\000\024\004\052" +
    "\005\055\006\053\007\057\010\062\023\054\037\061\052" +
    "\064\060\056\001\002\000\004\063\147\001\002\000\036" +
    "\002\uffd5\003\uffd5\007\uffd5\020\uffd5\021\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\051\uffd5\055\uffd5" +
    "\056\uffd5\001\002\000\042\012\100\022\076\023\070\024" +
    "\067\025\073\027\101\030\071\031\077\032\102\033\072" +
    "\034\103\035\065\036\066\053\uffd8\062\uffd8\065\075\001" +
    "\002\000\024\004\052\005\055\006\053\007\057\010\062" +
    "\023\054\037\061\052\064\060\056\001\002\000\040\011" +
    "\153\012\100\022\076\023\070\024\067\025\073\027\101" +
    "\030\071\031\077\032\102\033\072\034\103\035\065\036" +
    "\066\065\075\001\002\000\004\047\154\001\002\000\026" +
    "\004\052\005\055\006\053\007\057\010\062\023\054\037" +
    "\061\046\157\052\064\060\056\001\002\000\030\004\052" +
    "\005\055\006\053\007\057\010\062\023\054\037\061\046" +
    "\157\050\173\052\064\060\056\001\002\000\030\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\023\uffe3\037\uffe3\046" +
    "\uffe3\050\uffe3\052\uffe3\060\uffe3\001\002\000\004\047\167" +
    "\001\002\000\040\012\100\022\076\023\070\024\067\025" +
    "\073\027\101\030\071\031\077\032\102\033\072\034\103" +
    "\035\065\036\066\064\161\065\075\001\002\000\004\031" +
    "\162\001\002\000\004\047\163\001\002\000\032\003\027" +
    "\007\016\020\033\021\025\040\014\042\006\043\017\044" +
    "\031\045\032\051\021\055\022\056\005\001\002\000\034" +
    "\003\027\007\016\020\033\021\025\040\014\042\006\043" +
    "\017\044\031\045\032\050\166\051\021\055\022\056\005" +
    "\001\002\000\036\002\uffff\003\uffff\007\uffff\020\uffff\021" +
    "\uffff\040\uffff\042\uffff\043\uffff\044\uffff\045\uffff\050\uffff" +
    "\051\uffff\055\uffff\056\uffff\001\002\000\030\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\023\uffe2\037\uffe2\046\uffe2" +
    "\050\uffe2\052\uffe2\060\uffe2\001\002\000\032\003\027\007" +
    "\016\020\033\021\025\040\014\042\006\043\017\044\031" +
    "\045\032\051\021\055\022\056\005\001\002\000\034\003" +
    "\027\007\016\020\033\021\025\040\014\042\006\043\017" +
    "\044\031\045\032\050\171\051\021\055\022\056\005\001" +
    "\002\000\030\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\023\uffe1\037\uffe1\046\uffe1\050\uffe1\052\uffe1\060\uffe1\001" +
    "\002\000\030\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\023\uffe4\037\uffe4\046\uffe4\050\uffe4\052\uffe4\060\uffe4\001" +
    "\002\000\036\002\uffe0\003\uffe0\007\uffe0\020\uffe0\021\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0\051" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\010\007\016\020\176" +
    "\021\175\001\002\000\004\007\231\001\002\000\004\007" +
    "\226\001\002\000\024\004\052\005\055\006\053\007\057" +
    "\010\062\023\054\037\061\052\064\060\056\001\002\000" +
    "\024\004\052\005\055\006\053\007\057\010\062\023\054" +
    "\037\061\052\064\060\056\001\002\000\040\012\100\022" +
    "\076\023\070\024\067\025\073\027\101\030\071\031\077" +
    "\032\102\033\072\034\103\035\065\036\066\063\202\065" +
    "\075\001\002\000\004\007\203\001\002\000\010\022\211" +
    "\023\213\064\212\001\002\000\004\011\205\001\002\000" +
    "\004\047\206\001\002\000\032\003\027\007\016\020\033" +
    "\021\025\040\014\042\006\043\017\044\031\045\032\051" +
    "\021\055\022\056\005\001\002\000\034\003\027\007\016" +
    "\020\033\021\025\040\014\042\006\043\017\044\031\045" +
    "\032\050\210\051\021\055\022\056\005\001\002\000\036" +
    "\002\uffdc\003\uffdc\007\uffdc\020\uffdc\021\uffdc\040\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\050\uffdc\051\uffdc\055\uffdc" +
    "\056\uffdc\001\002\000\004\022\216\001\002\000\024\004" +
    "\052\005\055\006\053\007\057\010\062\023\054\037\061" +
    "\052\064\060\056\001\002\000\004\023\214\001\002\000" +
    "\004\011\uffd9\001\002\000\040\011\uffdb\012\100\022\076" +
    "\023\070\024\067\025\073\027\101\030\071\031\077\032" +
    "\102\033\072\034\103\035\065\036\066\065\075\001\002" +
    "\000\004\011\uffda\001\002\000\040\012\100\022\076\023" +
    "\070\024\067\025\073\027\101\030\071\031\077\032\102" +
    "\033\072\034\103\035\065\036\066\063\220\065\075\001" +
    "\002\000\004\007\203\001\002\000\004\011\222\001\002" +
    "\000\004\047\223\001\002\000\032\003\027\007\016\020" +
    "\033\021\025\040\014\042\006\043\017\044\031\045\032" +
    "\051\021\055\022\056\005\001\002\000\034\003\027\007" +
    "\016\020\033\021\025\040\014\042\006\043\017\044\031" +
    "\045\032\050\225\051\021\055\022\056\005\001\002\000" +
    "\036\002\uffdd\003\uffdd\007\uffdd\020\uffdd\021\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\055" +
    "\uffdd\056\uffdd\001\002\000\004\054\227\001\002\000\014" +
    "\013\046\014\041\015\044\016\045\017\042\001\002\000" +
    "\006\063\051\064\050\001\002\000\004\054\232\001\002" +
    "\000\014\013\046\014\041\015\044\016\045\017\042\001" +
    "\002\000\006\063\235\064\234\001\002\000\024\004\052" +
    "\005\055\006\053\007\057\010\062\023\054\037\061\052" +
    "\064\060\056\001\002\000\056\002\uffee\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\020\uffee\021\uffee\023" +
    "\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\050\uffee\051\uffee\052\uffee\055\uffee\056\uffee\060\uffee\001" +
    "\002\000\040\012\100\022\076\023\070\024\067\025\073" +
    "\027\101\030\071\031\077\032\102\033\072\034\103\035" +
    "\065\036\066\063\237\065\075\001\002\000\056\002\ufff0" +
    "\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\056" +
    "\ufff0\060\ufff0\001\002\000\036\002\ufff2\003\ufff2\007\ufff2" +
    "\020\ufff2\021\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\050\ufff2\051\ufff2\055\ufff2\056\ufff2\001\002\000\004" +
    "\054\242\001\002\000\014\013\046\014\041\015\044\016" +
    "\045\017\042\001\002\000\010\061\244\063\235\064\234" +
    "\001\002\000\004\062\245\001\002\000\004\064\246\001" +
    "\002\000\004\061\247\001\002\000\024\004\052\005\055" +
    "\006\053\007\057\010\062\023\054\037\061\052\064\060" +
    "\056\001\002\000\006\053\145\062\251\001\002\000\004" +
    "\063\252\001\002\000\036\002\uffd6\003\uffd6\007\uffd6\020" +
    "\uffd6\021\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\050\uffd6\051\uffd6\055\uffd6\056\uffd6\001\002\000\036\002" +
    "\uffe9\003\uffe9\007\uffe9\020\uffe9\021\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9\055\uffe9\056" +
    "\uffe9\001\002\000\024\004\052\005\055\006\053\007\057" +
    "\010\062\023\054\037\061\052\064\060\056\001\002\000" +
    "\040\011\256\012\100\022\076\023\070\024\067\025\073" +
    "\027\101\030\071\031\077\032\102\033\072\034\103\035" +
    "\065\036\066\065\075\001\002\000\004\063\257\001\002" +
    "\000\036\002\ufff1\003\ufff1\007\ufff1\020\ufff1\021\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1" +
    "\055\ufff1\056\ufff1\001\002\000\032\003\027\007\016\020" +
    "\033\021\025\040\014\042\006\043\017\044\031\045\032" +
    "\051\021\055\022\056\005\001\002\000\034\003\027\007" +
    "\016\020\033\021\025\040\014\042\006\043\017\044\031" +
    "\045\032\050\262\051\021\055\022\056\005\001\002\000" +
    "\004\042\263\001\002\000\004\010\264\001\002\000\024" +
    "\004\052\005\055\006\053\007\057\010\062\023\054\037" +
    "\061\052\064\060\056\001\002\000\040\011\266\012\100" +
    "\022\076\023\070\024\067\025\073\027\101\030\071\031" +
    "\077\032\102\033\072\034\103\035\065\036\066\065\075" +
    "\001\002\000\004\063\267\001\002\000\036\002\uffde\003" +
    "\uffde\007\uffde\020\uffde\021\uffde\040\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\050\uffde\051\uffde\055\uffde\056\uffde\001" +
    "\002\000\004\022\277\001\002\000\024\004\052\005\055" +
    "\006\053\007\057\010\062\023\054\037\061\052\064\060" +
    "\056\001\002\000\004\023\273\001\002\000\004\063\274" +
    "\001\002\000\056\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\020\uffea\021\uffea\023\uffea\037\uffea" +
    "\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050\uffea\051" +
    "\uffea\052\uffea\055\uffea\056\uffea\060\uffea\001\002\000\040" +
    "\012\100\022\076\023\070\024\067\025\073\027\101\030" +
    "\071\031\077\032\102\033\072\034\103\035\065\036\066" +
    "\063\276\065\075\001\002\000\056\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\020\uffec\021\uffec" +
    "\023\uffec\037\uffec\040\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\050\uffec\051\uffec\052\uffec\055\uffec\056\uffec\060\uffec" +
    "\001\002\000\004\063\300\001\002\000\056\002\uffeb\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\020\uffeb" +
    "\021\uffeb\023\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb" +
    "\060\uffeb\001\002\000\024\004\052\005\055\006\053\007" +
    "\057\010\062\023\054\037\061\052\064\060\056\001\002" +
    "\000\040\011\303\012\100\022\076\023\070\024\067\025" +
    "\073\027\101\030\071\031\077\032\102\033\072\034\103" +
    "\035\065\036\066\065\075\001\002\000\004\047\304\001" +
    "\002\000\032\003\027\007\016\020\033\021\025\040\014" +
    "\042\006\043\017\044\031\045\032\051\021\055\022\056" +
    "\005\001\002\000\034\003\027\007\016\020\033\021\025" +
    "\040\014\042\006\043\017\044\031\045\032\050\306\051" +
    "\021\055\022\056\005\001\002\000\040\002\uffe7\003\uffe7" +
    "\007\uffe7\020\uffe7\021\uffe7\040\uffe7\041\307\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\050\uffe7\051\uffe7\055\uffe7\056\uffe7" +
    "\001\002\000\006\040\014\047\310\001\002\000\032\003" +
    "\027\007\016\020\033\021\025\040\014\042\006\043\017" +
    "\044\031\045\032\051\021\055\022\056\005\001\002\000" +
    "\036\002\uffe6\003\uffe6\007\uffe6\020\uffe6\021\uffe6\040\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6\055" +
    "\uffe6\056\uffe6\001\002\000\034\003\027\007\016\020\033" +
    "\021\025\040\014\042\006\043\017\044\031\045\032\050" +
    "\313\051\021\055\022\056\005\001\002\000\036\002\uffe5" +
    "\003\uffe5\007\uffe5\020\uffe5\021\uffe5\040\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\055\uffe5\056\uffe5" +
    "\001\002\000\024\004\052\005\055\006\053\007\057\010" +
    "\062\023\054\037\061\052\064\060\056\001\002\000\040" +
    "\011\316\012\100\022\076\023\070\024\067\025\073\027" +
    "\101\030\071\031\077\032\102\033\072\034\103\035\065" +
    "\036\066\065\075\001\002\000\004\047\317\001\002\000" +
    "\032\003\027\007\016\020\033\021\025\040\014\042\006" +
    "\043\017\044\031\045\032\051\021\055\022\056\005\001" +
    "\002\000\034\003\027\007\016\020\033\021\025\040\014" +
    "\042\006\043\017\044\031\045\032\050\321\051\021\055" +
    "\022\056\005\001\002\000\036\002\uffdf\003\uffdf\007\uffdf" +
    "\020\uffdf\021\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\050\uffdf\051\uffdf\055\uffdf\056\uffdf\001\002\000\036" +
    "\002\uffe8\003\uffe8\007\uffe8\020\uffe8\021\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\055\uffe8" +
    "\056\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\036\002\034\003\012\005\003\006\011\007" +
    "\022\010\027\011\033\013\006\015\007\016\014\017\023" +
    "\020\010\021\017\023\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\164\006\011\007\022\010\027\011\033\013\006\015\007" +
    "\016\014\017\023\020\010\021\017\023\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\062" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\122\025\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\133\025\057\001\001\000\010\024\126" +
    "\025\057\026\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\125\025\057\001\001\000\006\024\124" +
    "\025\057\001\001\000\006\024\123\025\057\001\001\000" +
    "\006\024\121\025\057\001\001\000\006\024\117\025\057" +
    "\001\001\000\006\024\116\025\057\001\001\000\006\024" +
    "\115\025\057\001\001\000\002\001\001\000\006\024\114" +
    "\025\057\001\001\000\006\024\113\025\057\001\001\000" +
    "\006\024\111\025\057\001\001\000\006\024\107\025\057" +
    "\001\001\000\006\024\105\025\057\001\001\000\006\024" +
    "\104\025\057\001\001\000\006\024\103\025\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\110\025\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\122\025\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\131\025\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\135\025" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\142\024\143\025" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\147\025\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\151\025\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\154\012" +
    "\155\024\157\025\057\001\001\000\010\012\171\024\157" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\163\005\003\006\011\007\022\010\027\011\033\013" +
    "\006\015\007\016\014\017\023\020\010\021\017\023\025" +
    "\001\001\000\032\005\164\006\011\007\022\010\027\011" +
    "\033\013\006\015\007\016\014\017\023\020\010\021\017" +
    "\023\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\167\005\003\006\011\007\022\010\027\011\033" +
    "\013\006\015\007\016\014\017\023\020\010\021\017\023" +
    "\025\001\001\000\032\005\164\006\011\007\022\010\027" +
    "\011\033\013\006\015\007\016\014\017\023\020\010\021" +
    "\017\023\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\176\021\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\216\025\057" +
    "\001\001\000\006\024\200\025\057\001\001\000\002\001" +
    "\001\000\004\014\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\206\005\003\006" +
    "\011\007\022\010\027\011\033\013\006\015\007\016\014" +
    "\017\023\020\010\021\017\023\025\001\001\000\032\005" +
    "\164\006\011\007\022\010\027\011\033\013\006\015\007" +
    "\016\014\017\023\020\010\021\017\023\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\214\025\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\223\005\003\006\011\007\022\010\027\011\033\013\006" +
    "\015\007\016\014\017\023\020\010\021\017\023\025\001" +
    "\001\000\032\005\164\006\011\007\022\010\027\011\033" +
    "\013\006\015\007\016\014\017\023\020\010\021\017\023" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\232\001\001\000\002\001\001\000\006\024\235" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\247\024\143" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\254\025\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\260\005\003\006\011\007\022\010\027" +
    "\011\033\013\006\015\007\016\014\017\023\020\010\021" +
    "\017\023\025\001\001\000\032\005\164\006\011\007\022" +
    "\010\027\011\033\013\006\015\007\016\014\017\023\020" +
    "\010\021\017\023\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\264\025\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\274\025\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\301\025\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\304\005\003\006\011\007\022\010\027\011" +
    "\033\013\006\015\007\016\014\017\023\020\010\021\017" +
    "\023\025\001\001\000\032\005\164\006\011\007\022\010" +
    "\027\011\033\013\006\015\007\016\014\017\023\020\010" +
    "\021\017\023\025\001\001\000\002\001\001\000\004\006" +
    "\310\001\001\000\034\003\311\005\003\006\011\007\022" +
    "\010\027\011\033\013\006\015\007\016\014\017\023\020" +
    "\010\021\017\023\025\001\001\000\002\001\001\000\032" +
    "\005\164\006\011\007\022\010\027\011\033\013\006\015" +
    "\007\016\014\017\023\020\010\021\017\023\025\001\001" +
    "\000\002\001\001\000\006\024\314\025\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\317\005\003" +
    "\006\011\007\022\010\027\011\033\013\006\015\007\016" +
    "\014\017\023\020\010\021\017\023\025\001\001\000\032" +
    "\005\164\006\011\007\022\010\027\011\033\013\006\015" +
    "\007\016\014\017\023\020\010\021\017\023\025\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores(
                        TipoError.SINTACTICO,
                        ", No Recuperable. No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SCONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECLARACION_VECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= error FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PRINT ::= PRINTLN LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		     RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, b, c, a, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, b, c, a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= CONST ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(true, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= VAR ID DOS_PUNTOS TIPOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DeclaracionVariable(false, a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= ID IGUAL EXPRESION FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ID MAS MAS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= ID MENOS MENOS FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new AsignacionVariable(a,
                                                                        new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                            OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SBREAK ::= BREAK FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SBREAK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SCONTINUAR ::= CONTINUE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCONTINUAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIF ::= IF LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE ELSE LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASOS ::= CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASO ::= EXPRESION IGUAL MAYOR LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Caso(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASO ::= DEFAULT LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DefaultCase(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SMATCH ::= MATCH LPAREN EXPRESION RPAREN LBRACE CASOS RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Match(a, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SMATCH",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SWHILE ::= WHILE LPAREN EXPRESION RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new While(a, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWHILE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SDO ::= DO LBRACE INSTRUCCIONES RBRACE WHILE LPAREN EXPRESION RPAREN FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SDO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SFOR ::= FOR LPAREN DECLARACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SFOR ::= FOR LPAREN ASIGNACION EXPRESION FIN_INSTRUCCION REFRESH_FOR RPAREN LBRACE INSTRUCCIONES RBRACE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new For(a, b, c, d, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SFOR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REFRESH_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new AsignacionVariable(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REFRESH_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.INCREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REFRESH_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new AsignacionVariable(a, new Aritmeticas(new AccesoVariable(a, aleft, aright),
                                                                                      OperadoresAritmeticos.DECREMENTO, aleft, aright),
                                                                                      aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REFRESH_FOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA ::= LISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VECTOR ::= CONST ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecArreglo(true, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VECTOR ::= VAR ID DOS_PUNTOS TIPOS LSQUARE RSQUARE IGUAL LSQUARE LISTA RSQUARE FIN_INSTRUCCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new DecArreglo(false, a, c, b, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.INT);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.DOUBLE);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.BOOLEAN);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.CHAR);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		      RESULT = new Tipo(TipoDeDato.STRING);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION TIMES TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.INCREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new Aritmeticas(a, OperadoresAritmeticos.DECREMENTO, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION EQ EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.IGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION NE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.DIFERENCIACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MENOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Relacionales(a, b, OpRelacional.MAYOR_IGUAL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, b, OpLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= LPAREN TIPOS RPAREN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Casteo(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Logicos(a, OpLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= LPAREN EXPRESION RPAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Double.parseDouble(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean((String) a), new Tipo(TipoDeDato.BOOLEAN), aleft, aright );    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR2 ::= ID LSQUARE EXPRESION RSQUARE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new AccesoValorVector(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
